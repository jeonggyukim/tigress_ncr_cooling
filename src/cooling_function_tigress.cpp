#include <cmath>
#include <algorithm>

// #include <cstdarg> // for ath_error
// #include <cstdio>  // for ath_error

#include "defs.hpp"
#include "cooling_tigress.hpp"

// #include <stdint.h>
// #include <math.h>
// #include "../athena.h"
// #include "../globals.h"
// #include "../prototypes.h"
// #include "prototypes.h"
// #include "cool_solver.h"

// #ifdef TIGRESS_COOLING

static const int iPhotDiss = 1;
static const int iChem = 1;
static const int iPhotIon = 1;
static const int iCoolHISmith21 = 0;
static const int iCoolH2rovib = 1;
static const int iCoolH2colldiss = 1;
static const int iCRPhotC = 1;
static const int iH2heating = 1;
static const int iCII_rec_rate = 1;
static const int iPEheating = 1;

static const int ikgr_H2 = 1;

static const Real kgr_H2 = 3.0e-17;

static const Real dhnu_H2_PH = 0.0;
static const Real dhnu_HI_PH = 0.0;

// Fast exponential and log functions
// #define EXPLOGAPPROX

// Routines for CO shielding
// #define CO_SHIELDING

static const Real temp_hot0 = 2.0e4;
static const Real temp_hot1 = 3.5e4;

static const Real ln10 = 2.302585092994046;
static const Real ln10_inv = 0.43429448190325176;

#define POW10(a) ( std::pow((10.0) , (a)) )
#define POW(a,b) ( std::pow((a)    , (b)) )
#define LOG(a) ( std::log( (a) ) )
#define EXP(a) ( std::exp( (a) ) )

static const Real xCstd = 1.6e-4;
static const Real xOstd = 3.2e-4;

#define FOURTH(x) ( (x)*(x)*(x)*(x) )


/* Physical constants (from astropy) */
static const Real eV_ = 1.6021766340000001e-12;
static const Real kb_ = 1.380649e-16;
static const Real sigma_sb_ = 5.6703744191844314e-05;

/* Ortho to para ratio of H2*/
static const Real fo_ = 0.75;
static const Real fp_ = 0.25;
/* Coefficients for grain photoelectric heating */
/* Weingartner & Draine (2011): Rv = 3.1, bC=4.0, distribution A, ISRF */
static const Real CPE_[7] = {5.22, 2.25, 0.04996, 0.00430, 0.147, 0.431,0.692};
/* Coefficients for cooling by recombination of e- on PAH */
static const Real DPE_[5] = {0.4535, 2.234, -6.266, 1.442, 0.05089};

static const Real aNEB_[7] = {-0.0050817, 0.00765822, 0.11832144, -0.50515842,
  0.81569592,-0.58648172,0.69170381};

/*----C+, 2 level system---*/
static const Real A10CII_ = 2.3e-6;
static const Real E10CII_ = 1.26e-14;
static const Real g0CII_ = 2;
static const Real g1CII_ = 4;
/*----HI, 2 level system---*/
static const Real A10HI_ = 6.265e8;
static const Real E10HI_ = 1.634e-11;
static const Real g0HI_ = 1;
static const Real g1HI_ = 3;
/*----CI, 3 level system---*/
static const Real g0CI_ = 1;
static const Real g1CI_ = 3;
static const Real g2CI_ = 5;
static const Real A10CI_ = 7.880e-08;
static const Real A20CI_ = 1.810e-14;
static const Real A21CI_ = 2.650e-07;
static const Real E10CI_ = 3.261e-15;
static const Real E20CI_ = 8.624e-15;
static const Real E21CI_ = 5.363e-15;
/*----OI, 3 level system---*/
static const Real g0OI_ = 5;
static const Real g1OI_ = 3;
static const Real g2OI_ = 1;
static const Real A10OI_ = 8.910e-05;
static const Real A20OI_ = 1.340e-10;
static const Real A21OI_ = 1.750e-05;
static const Real E10OI_ = 3.144e-14;
static const Real E20OI_ = 4.509e-14;
static const Real E21OI_ = 1.365e-14;
/*----OII, 3 level system---*/
// 5 level system would be a better treatment but we follow Hollenbach & McKee (1989)
static const Real g0OII_ = 4;  // 4S_3/2
static const Real g1OII_ = 6;  // 2D_5/2
static const Real g2OII_ = 4;  // 2D_3/2
// Einstein coefficients (Osterbrock & Ferland 2006)
static const Real A10OII_ = 3.6e-5;
static const Real A20OII_ = 1.6e-4;
static const Real A21OII_ = 1.3e-7;
// Energy in erg
static const Real E10OII_ = 5.327305988921176e-12; // 3728.8 angstrom
static const Real E20OII_ = 5.331309332122727e-12; // 3726.0 angstrom
static const Real E21OII_ = 3.996068913999051e-15; // 497.1 micron


/*-----CO cooling table data, from Omukai+2010-----*/
#define lenTCO_ 11
#define lenNeffCO_ 11
static const Real TCO_[lenTCO_] = {10,	20,	30,	50,	80,	100,
                                   300,	600,	1000,	1500,	2000};
static const Real NeffCO_[lenNeffCO_] = {14.0, 14.5, 15.0, 15.5, 16.0, 16.5,
                                         17.0, 17.5, 18.0, 18.5, 19.0};

// JKIM: Values are slightly different from Omukai+2010 for T > 100K, any reason?
static const Real L0CO_[lenTCO_] = {24.77, 24.38, 24.21, 24.03, 23.89, 23.82,
                                    23.34238089, 22.99832519, 22.75384686, 22.56640625,
                                    22.43740866};

static const Real LLTECO_[lenNeffCO_*lenTCO_] = {
  21.08, 20.35, 19.94, 19.45, 19.01, 18.80, 17.81, 17.23, 16.86, 16.66, 16.55,
  21.09, 20.35, 19.95, 19.45, 19.01, 18.80, 17.81, 17.23, 16.86, 16.66, 16.55,
  21.11, 20.37, 19.96, 19.46, 19.01, 18.80, 17.81, 17.23, 16.86, 16.66, 16.55,
  21.18, 20.40, 19.98, 19.47, 19.02, 18.81, 17.82, 17.23, 16.87, 16.66, 16.55,
  21.37, 20.51, 20.05, 19.52, 19.05, 18.83, 17.82, 17.23, 16.87, 16.66, 16.55,
  21.67, 20.73, 20.23, 19.64, 19.13, 18.90, 17.85, 17.25, 16.88, 16.67, 16.56,
  22.04, 21.05, 20.52, 19.87, 19.32, 19.06, 17.92, 17.28, 16.90, 16.69, 16.58,
  22.44, 21.42, 20.86, 20.19, 19.60, 19.33, 18.08, 17.38, 16.97, 16.75, 16.63,
  22.87, 21.82, 21.24, 20.55, 19.95, 19.66, 18.34, 17.59, 17.15, 16.91, 16.78,
  23.30, 22.23, 21.65, 20.94, 20.32, 20.03, 18.67, 17.89, 17.48, 17.26, 17.12,
  23.76, 22.66, 22.06, 21.35, 20.71, 20.42, 19.03, 18.26, 17.93, 17.74, 17.61
};
static const Real nhalfCO_[lenNeffCO_*lenTCO_] = {
  3.29, 3.49 ,3.67  ,3.97,  4.30, 4.46, 5.17, 5.47, 5.53, 5.30, 4.70,
  3.27, 3.48 ,3.66  ,3.96,  4.30, 4.45, 5.16, 5.47, 5.53, 5.30, 4.70,
  3.22, 3.45 ,3.64  ,3.94,  4.29, 4.45, 5.16, 5.47, 5.53, 5.30, 4.70,
  3.07, 3.34 ,3.56  ,3.89,  4.26, 4.42, 5.15, 5.46, 5.52, 5.30, 4.70,
  2.72, 3.09 ,3.35  ,3.74,  4.16, 4.34, 5.13, 5.45, 5.51, 5.29, 4.68,
  2.24, 2.65 ,2.95  ,3.42,  3.92, 4.14, 5.06, 5.41, 5.48, 5.26, 4.64,
  1.74, 2.15 ,2.47  ,2.95,  3.49, 3.74, 4.86, 5.30, 5.39, 5.17, 4.53,
  1.24, 1.65 ,1.97  ,2.45,  3.00, 3.25, 4.47, 5.02, 5.16, 4.94, 4.27,
  0.742, 1.15 ,1.47  ,1.95,  2.50, 2.75, 3.98, 4.57, 4.73, 4.52, 3.84,
  0.242, 0.652,0.966 ,1.45,  2.00, 2.25, 3.48, 4.07, 4.24, 4.03, 3.35,
  -0.258, 0.152,0.466 ,0.95,	 1.50, 1.75, 2.98, 3.57, 3.74, 3.53, 2.85
};
static const Real alphaCO_[lenNeffCO_*lenTCO_] = {
  0.439, 0.409, 0.392, 0.370, 0.361, 0.357, 0.385, 0.437, 0.428, 0.354, 0.322,
  0.436, 0.407, 0.391, 0.368, 0.359, 0.356, 0.385, 0.437, 0.427, 0.354, 0.322,
  0.428, 0.401, 0.385, 0.364, 0.356, 0.352, 0.383, 0.436, 0.427, 0.352, 0.320,
  0.416, 0.388, 0.373, 0.353, 0.347, 0.345, 0.380, 0.434, 0.425, 0.349, 0.316,
  0.416, 0.378, 0.360, 0.338, 0.332, 0.330, 0.371, 0.429, 0.421, 0.341, 0.307,
  0.450, 0.396, 0.367, 0.334, 0.322, 0.317, 0.355, 0.419, 0.414, 0.329, 0.292,
  0.492, 0.435, 0.403, 0.362, 0.339, 0.329, 0.343, 0.406, 0.401, 0.317, 0.276,
  0.529, 0.473, 0.441, 0.404, 0.381, 0.370, 0.362, 0.410, 0.392, 0.316, 0.272,
  0.555, 0.503, 0.473, 0.440, 0.423, 0.414, 0.418, 0.446, 0.404, 0.335, 0.289,
  0.582, 0.528, 0.499, 0.469, 0.457, 0.451, 0.470, 0.487, 0.432, 0.364, 0.310,
  0.596, 0.546, 0.519, 0.492, 0.483, 0.479, 0.510, 0.516, 0.448, 0.372, 0.313
};

/*-----Cooling for hot gas, ion-by-ion CIE cooling from Gnat & Ferland (2012)-----*/

#define len_Lambda_tbl_ 251
// log10T = [4.0, 4.02, ... 9.0]
// CIE cooling rate due to H, He, and metals as a function of T
// (xHe=0.0955)
// Z_gas=1 with Asplund 2009 composition (see Table 1.4 of Draine (2011))
static const Real log10Lambda_H_[len_Lambda_tbl_] = {
  -26.31911036, -25.63732569, -25.04314392, -24.5177579 ,
  -24.03147863, -23.57585996, -23.15220898, -22.78878607,
  -22.48141954, -22.23436071, -22.05926753, -21.949903  ,
  -21.89267627, -21.87783919, -21.88671666, -21.91715061,
  -21.95249513, -21.99698562, -22.03942592, -22.08497289,
  -22.13242244, -22.17781208, -22.22053051, -22.26221814,
  -22.30367411, -22.34642414, -22.38540049, -22.42553702,
  -22.46426739, -22.50327688, -22.54183047, -22.58073744,
  -22.61823125, -22.65299814, -22.68719253, -22.72200538,
  -22.75448538, -22.78723758, -22.8180201 , -22.84709132,
  -22.87705003, -22.90612517, -22.93189627, -22.95607776,
  -22.97959833, -23.00187692, -23.02351627, -23.04504407,
  -23.06665785, -23.08835043, -23.10943169, -23.12885497,
  -23.14573347, -23.16492768, -23.18365587, -23.20328203,
  -23.22238318, -23.24017381, -23.25701602, -23.27355121,
  -23.28894031, -23.30348554, -23.31777185, -23.33212672,
  -23.34617306, -23.35927355, -23.37124207, -23.38242274,
  -23.393322  , -23.40391548, -23.41412666, -23.42366791,
  -23.43285416, -23.4418218 , -23.45041229, -23.45895931,
  -23.4671921 , -23.47454851, -23.48139683, -23.48744059,
  -23.49236379, -23.4966385 , -23.50070665, -23.503643  ,
  -23.50652268, -23.50951387, -23.51190986, -23.51378849,
  -23.51486814, -23.5153412 , -23.51551607, -23.51477061,
  -23.51380013, -23.51309107, -23.51228557, -23.51141681,
  -23.50988611, -23.50755616, -23.50550516, -23.50371436,
  -23.50101847, -23.49738293, -23.49293952, -23.4881068 ,
  -23.4831553 , -23.4788829 , -23.47418363, -23.46883843,
  -23.46307003, -23.45790506, -23.45261301, -23.44694189,
  -23.44124247, -23.43564286, -23.4294632 , -23.42411881,
  -23.4312997 , -23.42500854, -23.41797094, -23.41064168,
  -23.40419363, -23.39758875, -23.39040905, -23.38310877,
  -23.37551375, -23.36888565, -23.36145378, -23.35177268,
  -23.34348947, -23.33527519, -23.32648246, -23.31767487,
  -23.30904732, -23.3004099 , -23.29212799, -23.28327054,
  -23.27545514, -23.26678808, -23.25885178, -23.25067569,
  -23.24227831, -23.23422295, -23.22533583, -23.21736516,
  -23.20905109, -23.20134777, -23.19325225, -23.18514562,
  -23.17721852, -23.16867728, -23.16104973, -23.15188563,
  -23.14249142, -23.13286814, -23.12236579, -23.11331847,
  -23.10404267, -23.09454386, -23.08559509, -23.07508756,
  -23.06579134, -23.05737105, -23.04816124, -23.03871797,
  -23.03010626, -23.02127247, -23.01220993, -23.00332005,
  -22.99421593, -22.98620705, -22.97748579, -22.96926029,
  -22.96083293, -22.95283687, -22.94518414, -22.93729843,
  -22.92843314, -22.92073772, -22.9119694 , -22.90348667,
  -22.89525518, -22.88723814, -22.87940494, -22.8713551 ,
  -22.8638271 , -22.85608685, -22.84877986, -22.84155381,
  -22.83418585, -22.83075118, -22.82370102, -22.82026459,
  -22.81342666, -22.80992516, -22.80340691, -22.79999556,
  -22.79676579, -22.79349492, -22.79026165, -22.78705651,
  -22.78387387, -22.78069122, -22.77750857, -22.77432593,
  -22.77114328, -22.76796063, -22.76477798, -22.76159534,
  -22.75841269, -22.75523004, -22.75204739, -22.74886475,
  -22.7456821 , -22.74249945, -22.73931681, -22.73613416,
  -22.73295151, -22.72976886, -22.72658622, -22.72340357,
  -22.72022092, -22.71703827, -22.71385563, -22.71067298,
  -22.70749033, -22.70430769, -22.70112504, -22.69794239,
  -22.69475974, -22.6915771 , -22.68839445, -22.6852118 ,
  -22.68202915, -22.67884651, -22.67566386, -22.67248121,
  -22.66929857, -22.66611592, -22.66293327, -22.65975062,
  -22.65656798, -22.65338533, -22.65020268, -22.64702003,
  -22.64383739, -22.64065474, -22.63747209, -22.63428945,
  -22.6311068 , -22.62792415, -22.6247415
};

static const Real log10Lambda_He_[len_Lambda_tbl_] = {
  -32.54875386, -31.64927537, -30.84225871, -30.12321677,
  -29.444546  , -28.79697644, -28.17315662, -27.61007823,
  -27.08892187, -26.60766193, -26.18260567, -25.80618063,
  -25.47104998, -25.1755737 , -24.89968834, -24.65290501,
  -24.4141986 , -24.19884653, -23.98780911, -23.79885048,
  -23.63733696, -23.49671134, -23.38711915, -23.31243857,
  -23.27278699, -23.25997511, -23.26186331, -23.27708841,
  -23.29736354, -23.31683107, -23.33238021, -23.32709954,
  -23.29750897, -23.23883891, -23.1540393 , -23.04954566,
  -22.92883475, -22.79863176, -22.66888929, -22.5425408 ,
  -22.42132869, -22.31340693, -22.22036709, -22.14738416,
  -22.09571382, -22.06471556, -22.05290163, -22.05870665,
  -22.07848436, -22.10842956, -22.15033217, -22.18988684,
  -22.22608867, -22.26761647, -22.312606  , -22.36098869,
  -22.40910426, -22.4553965 , -22.5008603 , -22.54629712,
  -22.58944504, -22.62853333, -22.66831715, -22.70944047,
  -22.75003152, -22.78767984, -22.82239247, -22.85678824,
  -22.89047095, -22.92413295, -22.95742285, -22.98982594,
  -23.02031416, -23.05011848, -23.07796419, -23.10452349,
  -23.13142936, -23.15799219, -23.18451135, -23.20912875,
  -23.23171866, -23.25262921, -23.27506848, -23.2964507 ,
  -23.31181887, -23.32509546, -23.34135173, -23.36065247,
  -23.37976979, -23.39776246, -23.4151714 , -23.43082605,
  -23.44639317, -23.4614584 , -23.47562965, -23.48955562,
  -23.5026163 , -23.51474814, -23.52600212, -23.53651775,
  -23.54692443, -23.55627819, -23.56489495, -23.57270476,
  -23.58018486, -23.58668451, -23.59301942, -23.59873833,
  -23.60377768, -23.60738628, -23.61121197, -23.61395227,
  -23.6181493 , -23.6209617 , -23.62402819, -23.6260994 ,
  -23.62589764, -23.62761775, -23.62909415, -23.6286955 ,
  -23.62884879, -23.62942282, -23.62891121, -23.62772982,
  -23.62761964, -23.62723039, -23.62497766, -23.62055282,
  -23.61787751, -23.61511872, -23.61095628, -23.60700854,
  -23.60394493, -23.60021734, -23.59516902, -23.59042052,
  -23.5864475 , -23.58242283, -23.57630216, -23.57226894,
  -23.56618585, -23.56204917, -23.55598996, -23.55166707,
  -23.54585548, -23.54150133, -23.53564579, -23.5296356 ,
  -23.52381478, -23.51789753, -23.51207087, -23.50517165,
  -23.49800794, -23.49053482, -23.48281641, -23.47476099,
  -23.46789183, -23.4664044 , -23.45834748, -23.45026814,
  -23.4418347 , -23.43418135, -23.42631192, -23.41822049,
  -23.40960408, -23.40194919, -23.39413971, -23.38690222,
  -23.37827078, -23.37131699, -23.36301421, -23.35626396,
  -23.348218  , -23.34159955, -23.33423113, -23.32769469,
  -23.3193621 , -23.31133032, -23.30307881, -23.29509954,
  -23.28734783, -23.27978993, -23.2733084 , -23.26571394,
  -23.25946572, -23.25302222, -23.24692186, -23.24087246,
  -23.23549606, -23.2297273 , -23.22460134, -23.22047955,
  -23.21552849, -23.21138011, -23.20744599, -23.20417051,
  -23.20104108, -23.19787113, -23.19551747, -23.1931801 ,
  -23.19085475, -23.1885294 , -23.18620405, -23.1838787 ,
  -23.18155336, -23.17922801, -23.17690266, -23.17457731,
  -23.17225197, -23.16992662, -23.16760127, -23.16527592,
  -23.16295058, -23.16062523, -23.15829988, -23.15597453,
  -23.15364918, -23.15132384, -23.14899849, -23.14667314,
  -23.14434779, -23.14202245, -23.1396971 , -23.13737175,
  -23.1350464 , -23.13272106, -23.13039571, -23.12807036,
  -23.12574501, -23.12341966, -23.12109432, -23.11876897,
  -23.11644362, -23.11411827, -23.11179293, -23.10946758,
  -23.10714223, -23.10481688, -23.10249154, -23.10016619,
  -23.09784084, -23.09551549, -23.09319014, -23.0908648 ,
  -23.08853945, -23.0862141 , -23.08388875, -23.08156341,
  -23.07923806, -23.07691271, -23.07458736
};

static const Real log10Lambda_metal_[len_Lambda_tbl_] = {
  -26.05425346, -25.54249823, -25.10977683, -24.72792881,
  -24.37693165, -24.05185895, -23.74803311, -23.47878733,
  -23.23758876, -23.0339465 , -22.87474243, -22.75986611,
  -22.683904  , -22.6370691 , -22.60530011, -22.58237755,
  -22.55655777, -22.52913655, -22.49771082, -22.46237635,
  -22.42530422, -22.38408583, -22.34037948, -22.29589774,
  -22.25086493, -22.20523281, -22.15898785, -22.11234624,
  -22.0664118 , -22.02148396, -21.97648705, -21.93372514,
  -21.8911999 , -21.84923963, -21.8085493 , -21.76929099,
  -21.73110553, -21.69352756, -21.6573223 , -21.62136553,
  -21.58674252, -21.55363542, -21.52088832, -21.48998857,
  -21.46104809, -21.43410674, -21.4089084 , -21.38547115,
  -21.36397677, -21.34593213, -21.33391687, -21.3259765 ,
  -21.32236807, -21.32540008, -21.33200596, -21.33887838,
  -21.34325922, -21.34279724, -21.33808915, -21.33109605,
  -21.32212725, -21.31216037, -21.3040679 , -21.29778009,
  -21.29202576, -21.2856046 , -21.27927661, -21.27361174,
  -21.27019563, -21.27220059, -21.28267178, -21.30502816,
  -21.34216374, -21.3932162 , -21.45440403, -21.51900406,
  -21.58066815, -21.63370004, -21.67506105, -21.70434125,
  -21.72295653, -21.733857  , -21.73956797, -21.74168282,
  -21.74214214, -21.74266318, -21.74449796, -21.74877565,
  -21.75545426, -21.76357502, -21.77112096, -21.77609004,
  -21.77808062, -21.77709672, -21.77353975, -21.76856483,
  -21.76404399, -21.76106324, -21.7604241 , -21.76299894,
  -21.76913212, -21.77741087, -21.78937962, -21.8040515 ,
  -21.81835485, -21.83224831, -21.84672991, -21.86154385,
  -21.87694968, -21.89504689, -21.91564375, -21.93989601,
  -21.96966158, -22.00466347, -22.04426424, -22.08694119,
  -22.13159015, -22.17739517, -22.22372831, -22.26772558,
  -22.30970926, -22.3508992 , -22.39036078, -22.42937484,
  -22.46818647, -22.50513391, -22.54069337, -22.57171863,
  -22.60086147, -22.6258055 , -22.64589612, -22.6622299 ,
  -22.67477496, -22.68387571, -22.68891323, -22.69119225,
  -22.69199442, -22.68981297, -22.6853064 , -22.68048722,
  -22.67301031, -22.66598606, -22.65826039, -22.65041269,
  -22.6441871 , -22.63661773, -22.63127173, -22.62767098,
  -22.62558144, -22.62646882, -22.62949216, -22.6359695 ,
  -22.64452824, -22.65621212, -22.67061287, -22.68940603,
  -22.71161021, -22.73764303, -22.76869157, -22.79911251,
  -22.83427996, -22.8722688 , -22.91064798, -22.9475562 ,
  -22.98463769, -23.02084936, -23.05328415, -23.08576319,
  -23.11595982, -23.14415057, -23.16864024, -23.19270681,
  -23.21421194, -23.23631635, -23.25703653, -23.2748607 ,
  -23.2905519 , -23.30787198, -23.32442377, -23.33931809,
  -23.35447545, -23.36927644, -23.38402196, -23.39807192,
  -23.41084271, -23.42436469, -23.43766391, -23.45035236,
  -23.46266687, -23.4759503 , -23.48825948, -23.49993655,
  -23.51262757, -23.52575241, -23.53707258, -23.54914446,
  -23.5615995 , -23.57355315, -23.58569353, -23.59657432,
  -23.60818905, -23.6198038 , -23.63141854, -23.64303328,
  -23.65464802, -23.66626276, -23.6778775 , -23.68949225,
  -23.70110699, -23.71272173, -23.72433647, -23.73595121,
  -23.74756595, -23.7591807 , -23.77079544, -23.78241018,
  -23.79402492, -23.80563966, -23.8172544 , -23.82886915,
  -23.84048389, -23.85209863, -23.86371337, -23.87532811,
  -23.88694285, -23.89855759, -23.91017234, -23.92178708,
  -23.93340182, -23.94501656, -23.9566313 , -23.96824604,
  -23.97986079, -23.99147553, -24.00309027, -24.01470501,
  -24.02631975, -24.03793449, -24.04954924, -24.06116398,
  -24.07277872, -24.08439346, -24.0960082 , -24.10762294,
  -24.11923769, -24.13085243, -24.14246717, -24.15408191,
  -24.16569665, -24.17731139, -24.18892614
};

// CIE electron abundance resulting from He
// (xHe = 0.0955)
static const Real log10xe_He_[len_Lambda_tbl_] = {
  -8.        , -8.        , -8.        , -8.        , -8.        ,
  -8.        , -6.75764481, -6.24127409, -5.78066304, -5.35085593,
  -4.94369013, -4.55828108, -4.19011833, -3.83882776, -3.50305055,
  -3.18309238, -2.87705483, -2.58822603, -2.31458016, -2.06127031,
  -1.83068543, -1.6308466 , -1.46197841, -1.32976748, -1.23077999,
  -1.16033882, -1.11258185, -1.08099003, -1.06071198, -1.04723515,
  -1.0379452 , -1.03227322, -1.0284883 , -1.02535875, -1.02314376,
  -1.02070805, -1.01741968, -1.0126735 , -1.00537487, -0.99464011,
  -0.97884339, -0.95754272, -0.93045352, -0.8999374 , -0.86740704,
  -0.8360829 , -0.80883354, -0.7864619 , -0.76892223, -0.75562162,
  -0.7457988 , -0.73887794, -0.73345159, -0.72969609, -0.72708105,
  -0.72520431, -0.72378828, -0.7225576 , -0.72181062, -0.7211133 ,
  -0.72057611, -0.72036114, -0.72019819, -0.7199738 , -0.7197047 ,
  -0.71940143, -0.71936161, -0.71944304, -0.71922185, -0.71912749,
  -0.719171  , -0.71920644, -0.71923555, -0.71925967, -0.71927969,
  -0.71902487, -0.71887605, -0.71888789, -0.71889798, -0.71890657,
  -0.71891378, -0.71891996, -0.71892541, -0.71893009, -0.71893416,
  -0.71893767, -0.71894066, -0.71894335, -0.71894572, -0.7189478 ,
  -0.71894963, -0.71895124, -0.71895267, -0.71895395, -0.71895509,
  -0.71895611, -0.71895703, -0.71895784, -0.71895857, -0.71895924,
  -0.71895984, -0.71896038, -0.71896088, -0.71896131, -0.71896173,
  -0.71896209, -0.71896242, -0.71896272, -0.71896301, -0.71896327,
  -0.71896351, -0.7189637 , -0.71896392, -0.71896409, -0.71896427,
  -0.71896442, -0.71896456, -0.71896469, -0.71896481, -0.71896493,
  -0.71896503, -0.71896513, -0.71896522, -0.71896531, -0.71896538,
  -0.71896546, -0.71896553, -0.71896559, -0.71896565, -0.71896571,
  -0.71896576, -0.71896581, -0.71896585, -0.71896589, -0.71896593,
  -0.71896597, -0.71896601, -0.71896604, -0.71896607, -0.7189661 ,
  -0.71896613, -0.71896616, -0.71896618, -0.7189662 , -0.71896622,
  -0.71896625, -0.71896627, -0.71896628, -0.7189663 , -0.71896632,
  -0.71896633, -0.71896635, -0.71896636, -0.71896638, -0.71896639,
  -0.7189664 , -0.71896641, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663, -0.71896663, -0.71896663, -0.71896663, -0.71896663,
  -0.71896663
};

// CIE electron abundance resulting from metals
// Z_gas=1 with Asplund 2009 composition (see Table 1.4 of Draine (2011))
static const Real log10xe_metal_[len_Lambda_tbl_] = {
  -3.93625947, -3.89823596, -3.8440424 , -3.77508501, -3.6921331 ,
  -3.59870926, -3.50044359, -3.40379322, -3.3116647 , -3.22897953,
  -3.15827974, -3.10038476, -3.05519173, -3.02029743, -2.99326664,
  -2.97193107, -2.95486876, -2.94109588, -2.93058783, -2.9226536 ,
  -2.91682093, -2.91197929, -2.90752804, -2.90322979, -2.898204  ,
  -2.89243398, -2.88562643, -2.87776943, -2.86899832, -2.85879012,
  -2.84699243, -2.8334046 , -2.81812786, -2.8016018 , -2.78447905,
  -2.76691299, -2.74990959, -2.73363171, -2.71861136, -2.70493207,
  -2.69220682, -2.68040739, -2.66911416, -2.65839456, -2.64742631,
  -2.63624159, -2.62464734, -2.61211437, -2.59811811, -2.58323714,
  -2.56679514, -2.54925862, -2.53082037, -2.51251947, -2.49560443,
  -2.48045757, -2.46715543, -2.45557901, -2.44549945, -2.43611172,
  -2.42716909, -2.41835494, -2.40939531, -2.40022038, -2.39093202,
  -2.38162441, -2.372452  , -2.3631616 , -2.35355417, -2.34310915,
  -2.33113426, -2.31750485, -2.30301781, -2.28818437, -2.27455903,
  -2.26282305, -2.25355689, -2.24647365, -2.24091959, -2.23648092,
  -2.23276994, -2.22961382, -2.22683098, -2.22412945, -2.22148331,
  -2.21884024, -2.21604987, -2.21298847, -2.20976665, -2.20637495,
  -2.20280868, -2.199318  , -2.19604914, -2.19283724, -2.18964521,
  -2.18648418, -2.18325371, -2.17985573, -2.17626533, -2.17237324,
  -2.16844434, -2.16406904, -2.1598178 , -2.15534538, -2.15103463,
  -2.14697241, -2.14265204, -2.13856199, -2.13453003, -2.13044133,
  -2.12638532, -2.12211006, -2.11788816, -2.11332485, -2.10888028,
  -2.10422634, -2.09975983, -2.09505545, -2.09080909, -2.08623472,
  -2.08194827, -2.07793014, -2.07401221, -2.07020184, -2.06688694,
  -2.06391473, -2.06117101, -2.05874887, -2.05648577, -2.05473227,
  -2.05307638, -2.05128631, -2.04994708, -2.04870537, -2.04732159,
  -2.04630034, -2.04518335, -2.04399649, -2.04304236, -2.04197226,
  -2.04118446, -2.04024024, -2.03928244, -2.03847909, -2.03754711,
  -2.03677739, -2.03577271, -2.03500628, -2.03414777, -2.03334434,
  -2.03247714, -2.0316521 , -2.03068691, -2.0298066 , -2.02901155,
  -2.02813557, -2.02727585, -2.02662105, -2.02580816, -2.02493403,
  -2.02436346, -2.02354207, -2.02304821, -2.02240284, -2.02193726,
  -2.02154483, -2.02101702, -2.02074314, -2.02044159, -2.02000079,
  -2.01973734, -2.01955758, -2.0193805 , -2.01926044, -2.01918182,
  -2.0188477 , -2.01875565, -2.01866429, -2.01860617, -2.01850764,
  -2.01842954, -2.01834679, -2.01832487, -2.01804823, -2.01799941,
  -2.01792781, -2.01787216, -2.01778489, -2.01772078, -2.01761521,
  -2.01757161, -2.01751691, -2.01747439, -2.01736276, -2.01729321,
  -2.01726006, -2.0171621 , -2.01710832, -2.01704963, -2.01688068,
  -2.01682592, -2.01677117, -2.01671642, -2.01666166, -2.01660691,
  -2.01655216, -2.0164974 , -2.01644265, -2.0163879 , -2.01633314,
  -2.01627839, -2.01622364, -2.01616888, -2.01611413, -2.01605938,
  -2.01600462, -2.01594987, -2.01589512, -2.01584036, -2.01578561,
  -2.01573086, -2.0156761 , -2.01562135, -2.0155666 , -2.01551185,
  -2.01545709, -2.01540234, -2.01534759, -2.01529283, -2.01523808,
  -2.01518333, -2.01512857, -2.01507382, -2.01501907, -2.01496431,
  -2.01490956, -2.01485481, -2.01480005, -2.0147453 , -2.01469055,
  -2.01463579, -2.01458104, -2.01452629, -2.01447153, -2.01441678,
  -2.01436203, -2.01430727, -2.01425252, -2.01419777, -2.01414302,
  -2.01408826
};

#ifdef CO_SHIELDING

#define len_NCO_DB_ 8
#define len_NH2_DB_ 6
#define len_NCO_V09_ 47
#define len_NH2_V09_ 42

/*CO column density for DB table*/
const Real logNCOvDB_[len_NCO_DB_] = {0, 13, 14, 15, 16, 17, 18, 19};
/* H2 column densities for DB table*/
const Real logNH2vDB_[len_NH2_DB_] = {0, 19, 20, 21, 22, 23};
/* Tabulated shielding factors */
const Real ThetavDB_[len_NH2_DB_][len_NCO_DB_] =
  {{1.0, 9.681e-1, 7.764e-1, 3.631e-1, 7.013e-2, 1.295e-2, 1.738e-3, 9.985e-5},
   {8.215e-1, 7.916e-1, 6.160e-1, 2.749e-1, 5.351e-2, 1.065e-2, 1.519e-3, 8.818e-5},
   {7.160e-1, 6.900e-1, 5.360e-1, 2.359e-1, 4.416e-2, 8.769e-3, 1.254e-3, 7.558e-5},
   {3.500e-1, 3.415e-1, 2.863e-1, 1.360e-1, 2.500e-2, 4.983e-3, 7.151e-4, 3.796e-5},
   {4.973e-2, 4.877e-2, 4.296e-2, 2.110e-2, 4.958e-3, 9.245e-4, 1.745e-4, 8.377e-6},
   {1.310e-4, 1.293e-4, 1.160e-4, 6.346e-5, 1.822e-5, 6.842e-6, 3.622e-6, 3.572e-7}};

/*-------------------Visser 2009 Table 5---------------------------*/
const double logNCOV09_[len_NCO_V09_] =
  {0.000,10.000,10.200,10.400,10.600,10.800,11.000,11.200,11.400,11.600,11.800,
   12.000,12.200,12.400,12.600,12.800,13.000,13.200,13.400,13.600,13.800,14.000,
   14.200,14.400,14.600,14.800,15.000,15.200,15.400,15.600,15.800,16.000,16.200,
   16.400,16.600,16.800,17.000,17.200,17.400,17.600,17.800,18.000,18.200,18.400,
   18.600,18.800,19.000};
const double logNH2V09_[len_NH2_V09_] =
  {0.000,15.000,15.200,15.400,15.600,15.800,16.000,16.200,16.400,16.600,16.800,
   17.000,17.200,17.400,17.600,17.800,18.000,18.200,18.400,18.600,18.800,19.000,
   19.200,19.400,19.600,19.800,20.000,20.200,20.400,20.600,20.800,21.000,21.200,
   21.400,21.600,21.800,22.000,22.200,22.400,22.600,22.800,23.000};
const double ThetaV09_[len_NH2_V09_][len_NCO_V09_] =
  {{1.000e+00,9.997e-01,9.995e-01,9.992e-01,9.988e-01,9.981e-01,9.970e-01,9.953e-01,9.926e-01,9.883e-01,9.817e-01,9.716e-01,9.563e-01,9.338e-01,9.021e-01,8.599e-01,8.080e-01,7.498e-01,6.900e-01,6.323e-01,5.777e-01,5.250e-01,4.720e-01,4.177e-01,3.614e-01,3.028e-01,2.434e-01,1.871e-01,1.387e-01,1.012e-01,7.401e-02,5.467e-02,4.075e-02,3.063e-02,2.323e-02,1.775e-02,1.362e-02,1.044e-02,7.963e-03,6.037e-03,4.541e-03,3.378e-03,2.470e-03,1.759e-03,1.210e-03,8.046e-04,5.240e-04},
   {8.985e-01,8.983e-01,8.981e-01,8.978e-01,8.974e-01,8.967e-01,8.956e-01,8.939e-01,8.913e-01,8.871e-01,8.807e-01,8.707e-01,8.558e-01,8.338e-01,8.030e-01,7.621e-01,7.122e-01,6.569e-01,6.014e-01,5.494e-01,5.021e-01,4.578e-01,4.137e-01,3.681e-01,3.201e-01,2.694e-01,2.177e-01,1.683e-01,1.256e-01,9.224e-02,6.786e-02,5.034e-02,3.767e-02,2.844e-02,2.167e-02,1.664e-02,1.282e-02,9.868e-03,7.556e-03,5.743e-03,4.325e-03,3.223e-03,2.363e-03,1.690e-03,1.169e-03,7.815e-04,5.112e-04},
   {8.966e-01,8.963e-01,8.962e-01,8.959e-01,8.955e-01,8.948e-01,8.937e-01,8.920e-01,8.894e-01,8.852e-01,8.788e-01,8.688e-01,8.539e-01,8.319e-01,8.011e-01,7.602e-01,7.103e-01,6.551e-01,5.996e-01,5.476e-01,5.004e-01,4.562e-01,4.122e-01,3.667e-01,3.190e-01,2.685e-01,2.171e-01,1.679e-01,1.254e-01,9.214e-02,6.781e-02,5.031e-02,3.765e-02,2.842e-02,2.166e-02,1.663e-02,1.282e-02,9.865e-03,7.554e-03,5.741e-03,4.323e-03,3.222e-03,2.362e-03,1.689e-03,1.169e-03,7.811e-04,5.110e-04},
   {8.949e-01,8.946e-01,8.944e-01,8.941e-01,8.937e-01,8.930e-01,8.920e-01,8.903e-01,8.876e-01,8.834e-01,8.770e-01,8.671e-01,8.521e-01,8.302e-01,7.993e-01,7.585e-01,7.086e-01,6.533e-01,5.979e-01,5.460e-01,4.988e-01,4.546e-01,4.107e-01,3.655e-01,3.179e-01,2.677e-01,2.165e-01,1.676e-01,1.252e-01,9.204e-02,6.776e-02,5.028e-02,3.763e-02,2.841e-02,2.165e-02,1.662e-02,1.281e-02,9.861e-03,7.551e-03,5.739e-03,4.322e-03,3.220e-03,2.361e-03,1.689e-03,1.168e-03,7.808e-04,5.108e-04},
   {8.932e-01,8.929e-01,8.927e-01,8.924e-01,8.920e-01,8.913e-01,8.903e-01,8.886e-01,8.859e-01,8.818e-01,8.753e-01,8.654e-01,8.504e-01,8.285e-01,7.976e-01,7.568e-01,7.069e-01,6.517e-01,5.962e-01,5.444e-01,4.972e-01,4.531e-01,4.094e-01,3.642e-01,3.169e-01,2.669e-01,2.159e-01,1.672e-01,1.250e-01,9.193e-02,6.770e-02,5.025e-02,3.761e-02,2.839e-02,2.164e-02,1.661e-02,1.281e-02,9.858e-03,7.549e-03,5.737e-03,4.320e-03,3.219e-03,2.360e-03,1.688e-03,1.168e-03,7.805e-04,5.106e-04},
   {8.915e-01,8.912e-01,8.911e-01,8.908e-01,8.904e-01,8.897e-01,8.886e-01,8.869e-01,8.843e-01,8.801e-01,8.737e-01,8.637e-01,8.488e-01,8.269e-01,7.960e-01,7.551e-01,7.053e-01,6.501e-01,5.947e-01,5.428e-01,4.957e-01,4.517e-01,4.080e-01,3.630e-01,3.159e-01,2.661e-01,2.154e-01,1.669e-01,1.248e-01,9.182e-02,6.764e-02,5.022e-02,3.759e-02,2.838e-02,2.162e-02,1.661e-02,1.280e-02,9.854e-03,7.546e-03,5.735e-03,4.319e-03,3.218e-03,2.359e-03,1.687e-03,1.167e-03,7.802e-04,5.104e-04},
   {8.899e-01,8.896e-01,8.895e-01,8.892e-01,8.888e-01,8.881e-01,8.870e-01,8.853e-01,8.827e-01,8.785e-01,8.721e-01,8.621e-01,8.472e-01,8.253e-01,7.944e-01,7.536e-01,7.037e-01,6.485e-01,5.931e-01,5.413e-01,4.942e-01,4.503e-01,4.067e-01,3.618e-01,3.148e-01,2.653e-01,2.148e-01,1.665e-01,1.246e-01,9.170e-02,6.758e-02,5.018e-02,3.757e-02,2.837e-02,2.161e-02,1.660e-02,1.280e-02,9.851e-03,7.544e-03,5.733e-03,4.317e-03,3.216e-03,2.358e-03,1.686e-03,1.167e-03,7.799e-04,5.103e-04},
   {8.855e-01,8.852e-01,8.850e-01,8.848e-01,8.843e-01,8.837e-01,8.826e-01,8.809e-01,8.782e-01,8.741e-01,8.676e-01,8.577e-01,8.428e-01,8.209e-01,7.900e-01,7.492e-01,6.993e-01,6.442e-01,5.888e-01,5.371e-01,4.901e-01,4.463e-01,4.028e-01,3.582e-01,3.114e-01,2.622e-01,2.120e-01,1.642e-01,1.227e-01,9.024e-02,6.640e-02,4.917e-02,3.667e-02,2.759e-02,2.096e-02,1.608e-02,1.239e-02,9.538e-03,7.308e-03,5.558e-03,4.189e-03,3.123e-03,2.290e-03,1.638e-03,1.133e-03,7.572e-04,4.958e-04},
   {8.834e-01,8.831e-01,8.829e-01,8.826e-01,8.822e-01,8.815e-01,8.805e-01,8.788e-01,8.761e-01,8.720e-01,8.655e-01,8.556e-01,8.406e-01,8.187e-01,7.879e-01,7.471e-01,6.972e-01,6.421e-01,5.867e-01,5.350e-01,4.881e-01,4.443e-01,4.010e-01,3.565e-01,3.099e-01,2.609e-01,2.111e-01,1.635e-01,1.223e-01,9.003e-02,6.629e-02,4.911e-02,3.664e-02,2.757e-02,2.095e-02,1.607e-02,1.238e-02,9.533e-03,7.305e-03,5.555e-03,4.187e-03,3.121e-03,2.289e-03,1.637e-03,1.132e-03,7.567e-04,4.955e-04},
   {8.814e-01,8.811e-01,8.809e-01,8.807e-01,8.802e-01,8.796e-01,8.785e-01,8.768e-01,8.741e-01,8.700e-01,8.635e-01,8.536e-01,8.387e-01,8.168e-01,7.859e-01,7.451e-01,6.953e-01,6.401e-01,5.848e-01,5.331e-01,4.862e-01,4.425e-01,3.993e-01,3.549e-01,3.085e-01,2.597e-01,2.101e-01,1.629e-01,1.219e-01,8.978e-02,6.616e-02,4.905e-02,3.661e-02,2.755e-02,2.094e-02,1.606e-02,1.237e-02,9.529e-03,7.302e-03,5.553e-03,4.185e-03,3.120e-03,2.288e-03,1.636e-03,1.131e-03,7.562e-04,4.952e-04},
   {8.792e-01,8.789e-01,8.788e-01,8.785e-01,8.781e-01,8.774e-01,8.763e-01,8.746e-01,8.720e-01,8.678e-01,8.614e-01,8.515e-01,8.365e-01,8.146e-01,7.838e-01,7.429e-01,6.931e-01,6.380e-01,5.827e-01,5.310e-01,4.842e-01,4.405e-01,3.974e-01,3.531e-01,3.068e-01,2.583e-01,2.090e-01,1.620e-01,1.214e-01,8.948e-02,6.601e-02,4.897e-02,3.657e-02,2.753e-02,2.092e-02,1.605e-02,1.237e-02,9.523e-03,7.297e-03,5.549e-03,4.182e-03,3.117e-03,2.286e-03,1.634e-03,1.130e-03,7.557e-04,4.948e-04},
   {8.766e-01,8.764e-01,8.762e-01,8.759e-01,8.755e-01,8.748e-01,8.737e-01,8.720e-01,8.694e-01,8.652e-01,8.588e-01,8.489e-01,8.339e-01,8.120e-01,7.812e-01,7.404e-01,6.906e-01,6.355e-01,5.802e-01,5.285e-01,4.817e-01,4.381e-01,3.951e-01,3.509e-01,3.049e-01,2.566e-01,2.076e-01,1.611e-01,1.207e-01,8.911e-02,6.581e-02,4.887e-02,3.652e-02,2.749e-02,2.090e-02,1.603e-02,1.235e-02,9.515e-03,7.291e-03,5.545e-03,4.178e-03,3.114e-03,2.284e-03,1.633e-03,1.129e-03,7.549e-04,4.943e-04},
   {8.735e-01,8.732e-01,8.730e-01,8.728e-01,8.723e-01,8.716e-01,8.706e-01,8.689e-01,8.662e-01,8.621e-01,8.556e-01,8.457e-01,8.308e-01,8.089e-01,7.781e-01,7.372e-01,6.874e-01,6.324e-01,5.771e-01,5.255e-01,4.787e-01,4.352e-01,3.923e-01,3.483e-01,3.025e-01,2.546e-01,2.060e-01,1.598e-01,1.199e-01,8.861e-02,6.554e-02,4.874e-02,3.644e-02,2.745e-02,2.087e-02,1.601e-02,1.234e-02,9.504e-03,7.284e-03,5.539e-03,4.173e-03,3.111e-03,2.281e-03,1.630e-03,1.128e-03,7.540e-04,4.937e-04},
   {8.697e-01,8.694e-01,8.692e-01,8.689e-01,8.685e-01,8.678e-01,8.668e-01,8.651e-01,8.624e-01,8.583e-01,8.518e-01,8.419e-01,8.270e-01,8.051e-01,7.743e-01,7.335e-01,6.837e-01,6.286e-01,5.734e-01,5.218e-01,4.751e-01,4.317e-01,3.889e-01,3.451e-01,2.996e-01,2.520e-01,2.039e-01,1.582e-01,1.188e-01,8.795e-02,6.517e-02,4.854e-02,3.634e-02,2.738e-02,2.083e-02,1.598e-02,1.232e-02,9.490e-03,7.273e-03,5.530e-03,4.167e-03,3.105e-03,2.277e-03,1.628e-03,1.126e-03,7.527e-04,4.929e-04},
   {8.652e-01,8.649e-01,8.647e-01,8.644e-01,8.640e-01,8.633e-01,8.623e-01,8.606e-01,8.579e-01,8.538e-01,8.473e-01,8.374e-01,8.225e-01,8.006e-01,7.698e-01,7.290e-01,6.793e-01,6.242e-01,5.690e-01,5.175e-01,4.709e-01,4.276e-01,3.849e-01,3.414e-01,2.962e-01,2.490e-01,2.014e-01,1.563e-01,1.175e-01,8.712e-02,6.469e-02,4.828e-02,3.619e-02,2.729e-02,2.077e-02,1.594e-02,1.229e-02,9.471e-03,7.259e-03,5.519e-03,4.158e-03,3.098e-03,2.271e-03,1.624e-03,1.123e-03,7.509e-04,4.919e-04},
   {8.600e-01,8.597e-01,8.595e-01,8.593e-01,8.588e-01,8.582e-01,8.571e-01,8.554e-01,8.528e-01,8.486e-01,8.422e-01,8.323e-01,8.173e-01,7.955e-01,7.647e-01,7.239e-01,6.742e-01,6.192e-01,5.640e-01,5.126e-01,4.660e-01,4.229e-01,3.804e-01,3.371e-01,2.923e-01,2.456e-01,1.985e-01,1.541e-01,1.159e-01,8.608e-02,6.406e-02,4.791e-02,3.598e-02,2.717e-02,2.069e-02,1.589e-02,1.226e-02,9.445e-03,7.239e-03,5.504e-03,4.146e-03,3.089e-03,2.264e-03,1.618e-03,1.119e-03,7.486e-04,4.904e-04},
   {8.543e-01,8.540e-01,8.539e-01,8.536e-01,8.532e-01,8.525e-01,8.514e-01,8.497e-01,8.471e-01,8.429e-01,8.365e-01,8.266e-01,8.117e-01,7.898e-01,7.591e-01,7.183e-01,6.686e-01,6.137e-01,5.586e-01,5.072e-01,4.608e-01,4.178e-01,3.755e-01,3.325e-01,2.880e-01,2.418e-01,1.953e-01,1.516e-01,1.140e-01,8.481e-02,6.326e-02,4.743e-02,3.569e-02,2.699e-02,2.058e-02,1.582e-02,1.221e-02,9.411e-03,7.213e-03,5.483e-03,4.130e-03,3.076e-03,2.254e-03,1.611e-03,1.115e-03,7.456e-04,4.885e-04},
   {8.482e-01,8.479e-01,8.477e-01,8.475e-01,8.470e-01,8.464e-01,8.453e-01,8.436e-01,8.410e-01,8.368e-01,8.304e-01,8.205e-01,8.056e-01,7.838e-01,7.531e-01,7.124e-01,6.627e-01,6.079e-01,5.529e-01,5.016e-01,4.553e-01,4.125e-01,3.704e-01,3.277e-01,2.836e-01,2.379e-01,1.920e-01,1.489e-01,1.120e-01,8.334e-02,6.227e-02,4.680e-02,3.530e-02,2.675e-02,2.043e-02,1.572e-02,1.214e-02,9.363e-03,7.177e-03,5.456e-03,4.108e-03,3.059e-03,2.241e-03,1.602e-03,1.108e-03,7.415e-04,4.859e-04},
   {8.416e-01,8.414e-01,8.412e-01,8.409e-01,8.405e-01,8.398e-01,8.387e-01,8.371e-01,8.344e-01,8.303e-01,8.238e-01,8.140e-01,7.991e-01,7.773e-01,7.466e-01,7.060e-01,6.565e-01,6.017e-01,5.468e-01,4.957e-01,4.496e-01,4.069e-01,3.651e-01,3.228e-01,2.792e-01,2.340e-01,1.886e-01,1.461e-01,1.098e-01,8.169e-02,6.110e-02,4.602e-02,3.479e-02,2.643e-02,2.023e-02,1.559e-02,1.205e-02,9.298e-03,7.129e-03,5.419e-03,4.079e-03,3.037e-03,2.225e-03,1.590e-03,1.100e-03,7.364e-04,4.827e-04},
   {8.345e-01,8.342e-01,8.340e-01,8.337e-01,8.333e-01,8.326e-01,8.316e-01,8.299e-01,8.273e-01,8.231e-01,8.167e-01,8.069e-01,7.920e-01,7.703e-01,7.397e-01,6.992e-01,6.498e-01,5.952e-01,5.405e-01,4.895e-01,4.436e-01,4.012e-01,3.597e-01,3.178e-01,2.747e-01,2.300e-01,1.853e-01,1.433e-01,1.075e-01,7.995e-02,5.981e-02,4.510e-02,3.417e-02,2.602e-02,1.995e-02,1.541e-02,1.193e-02,9.209e-03,7.063e-03,5.369e-03,4.041e-03,3.008e-03,2.204e-03,1.575e-03,1.090e-03,7.299e-04,4.785e-04},
   {8.265e-01,8.262e-01,8.260e-01,8.258e-01,8.254e-01,8.247e-01,8.236e-01,8.220e-01,8.193e-01,8.152e-01,8.088e-01,7.990e-01,7.842e-01,7.626e-01,7.321e-01,6.918e-01,6.425e-01,5.881e-01,5.337e-01,4.830e-01,4.373e-01,3.952e-01,3.542e-01,3.127e-01,2.701e-01,2.261e-01,1.820e-01,1.406e-01,1.053e-01,7.817e-02,5.843e-02,4.407e-02,3.343e-02,2.550e-02,1.960e-02,1.516e-02,1.176e-02,9.086e-03,6.973e-03,5.302e-03,3.991e-03,2.971e-03,2.176e-03,1.556e-03,1.077e-03,7.215e-04,4.731e-04},
   {8.176e-01,8.173e-01,8.171e-01,8.169e-01,8.164e-01,8.158e-01,8.147e-01,8.130e-01,8.104e-01,8.063e-01,8.000e-01,7.903e-01,7.756e-01,7.540e-01,7.237e-01,6.836e-01,6.347e-01,5.806e-01,5.265e-01,4.761e-01,4.308e-01,3.891e-01,3.485e-01,3.076e-01,2.656e-01,2.222e-01,1.787e-01,1.378e-01,1.031e-01,7.637e-02,5.701e-02,4.297e-02,3.260e-02,2.488e-02,1.915e-02,1.484e-02,1.152e-02,8.919e-03,6.851e-03,5.212e-03,3.925e-03,2.922e-03,2.141e-03,1.531e-03,1.061e-03,7.108e-04,4.662e-04},
   {8.073e-01,8.070e-01,8.069e-01,8.066e-01,8.062e-01,8.055e-01,8.045e-01,8.028e-01,8.002e-01,7.962e-01,7.899e-01,7.802e-01,7.657e-01,7.443e-01,7.143e-01,6.746e-01,6.261e-01,5.725e-01,5.189e-01,4.689e-01,4.240e-01,3.828e-01,3.427e-01,3.023e-01,2.609e-01,2.182e-01,1.753e-01,1.350e-01,1.008e-01,7.452e-02,5.552e-02,4.179e-02,3.167e-02,2.417e-02,1.861e-02,1.443e-02,1.122e-02,8.697e-03,6.689e-03,5.093e-03,3.838e-03,2.859e-03,2.096e-03,1.500e-03,1.040e-03,6.969e-04,4.573e-04},
   {7.949e-01,7.946e-01,7.944e-01,7.942e-01,7.938e-01,7.931e-01,7.921e-01,7.904e-01,7.879e-01,7.839e-01,7.777e-01,7.682e-01,7.538e-01,7.328e-01,7.032e-01,6.640e-01,6.162e-01,5.633e-01,5.104e-01,4.611e-01,4.168e-01,3.760e-01,3.364e-01,2.966e-01,2.559e-01,2.138e-01,1.716e-01,1.320e-01,9.827e-02,7.248e-02,5.388e-02,4.048e-02,3.064e-02,2.335e-02,1.796e-02,1.393e-02,1.084e-02,8.411e-03,6.477e-03,4.938e-03,3.725e-03,2.778e-03,2.038e-03,1.460e-03,1.013e-03,6.792e-04,4.459e-04},
   {7.784e-01,7.782e-01,7.780e-01,7.778e-01,7.774e-01,7.767e-01,7.757e-01,7.741e-01,7.716e-01,7.677e-01,7.617e-01,7.524e-01,7.383e-01,7.177e-01,6.888e-01,6.504e-01,6.037e-01,5.519e-01,5.000e-01,4.516e-01,4.081e-01,3.680e-01,3.290e-01,2.898e-01,2.498e-01,2.085e-01,1.671e-01,1.283e-01,9.528e-02,7.009e-02,5.199e-02,3.899e-02,2.946e-02,2.242e-02,1.722e-02,1.334e-02,1.038e-02,8.056e-03,6.209e-03,4.740e-03,3.581e-03,2.675e-03,1.965e-03,1.409e-03,9.785e-04,6.566e-04,4.313e-04},
   {7.553e-01,7.550e-01,7.549e-01,7.546e-01,7.543e-01,7.536e-01,7.527e-01,7.511e-01,7.487e-01,7.450e-01,7.391e-01,7.301e-01,7.166e-01,6.967e-01,6.688e-01,6.317e-01,5.865e-01,5.364e-01,4.861e-01,4.391e-01,3.966e-01,3.575e-01,3.194e-01,2.811e-01,2.420e-01,2.017e-01,1.614e-01,1.236e-01,9.158e-02,6.719e-02,4.972e-02,3.723e-02,2.808e-02,2.134e-02,1.637e-02,1.267e-02,9.843e-03,7.635e-03,5.885e-03,4.496e-03,3.402e-03,2.546e-03,1.874e-03,1.346e-03,9.352e-04,6.280e-04,4.129e-04},
   {7.223e-01,7.220e-01,7.219e-01,7.216e-01,7.213e-01,7.207e-01,7.198e-01,7.183e-01,7.160e-01,7.125e-01,7.069e-01,6.984e-01,6.856e-01,6.668e-01,6.404e-01,6.053e-01,5.624e-01,5.149e-01,4.670e-01,4.221e-01,3.812e-01,3.434e-01,3.066e-01,2.695e-01,2.317e-01,1.929e-01,1.540e-01,1.177e-01,8.696e-02,6.364e-02,4.701e-02,3.515e-02,2.649e-02,2.010e-02,1.540e-02,1.190e-02,9.231e-03,7.150e-03,5.506e-03,4.207e-03,3.186e-03,2.388e-03,1.761e-03,1.266e-03,8.811e-04,5.923e-04,3.899e-04},
   {6.758e-01,6.756e-01,6.754e-01,6.752e-01,6.749e-01,6.743e-01,6.735e-01,6.722e-01,6.701e-01,6.668e-01,6.618e-01,6.540e-01,6.423e-01,6.250e-01,6.008e-01,5.686e-01,5.292e-01,4.854e-01,4.410e-01,3.991e-01,3.607e-01,3.249e-01,2.898e-01,2.546e-01,2.186e-01,1.816e-01,1.448e-01,1.104e-01,8.136e-02,5.941e-02,4.382e-02,3.274e-02,2.465e-02,1.869e-02,1.430e-02,1.103e-02,8.540e-03,6.601e-03,5.074e-03,3.871e-03,2.931e-03,2.198e-03,1.623e-03,1.169e-03,8.145e-04,5.484e-04,3.619e-04},
   {6.127e-01,6.125e-01,6.124e-01,6.122e-01,6.119e-01,6.114e-01,6.107e-01,6.095e-01,6.077e-01,6.049e-01,6.005e-01,5.937e-01,5.835e-01,5.685e-01,5.473e-01,5.192e-01,4.847e-01,4.461e-01,4.067e-01,3.691e-01,3.342e-01,3.012e-01,2.686e-01,2.358e-01,2.022e-01,1.678e-01,1.335e-01,1.016e-01,7.474e-02,5.447e-02,4.013e-02,2.996e-02,2.255e-02,1.708e-02,1.304e-02,1.004e-02,7.759e-03,5.983e-03,4.587e-03,3.490e-03,2.637e-03,1.975e-03,1.459e-03,1.052e-03,7.343e-04,4.956e-04,3.281e-04},
   {5.310e-01,5.309e-01,5.308e-01,5.306e-01,5.304e-01,5.300e-01,5.295e-01,5.285e-01,5.271e-01,5.248e-01,5.212e-01,5.158e-01,5.076e-01,4.955e-01,4.784e-01,4.557e-01,4.276e-01,3.959e-01,3.632e-01,3.313e-01,3.010e-01,2.718e-01,2.426e-01,2.129e-01,1.825e-01,1.513e-01,1.202e-01,9.136e-02,6.707e-02,4.880e-02,3.591e-02,2.678e-02,2.014e-02,1.523e-02,1.161e-02,8.915e-03,6.873e-03,5.286e-03,4.039e-03,3.062e-03,2.305e-03,1.721e-03,1.270e-03,9.161e-04,6.405e-04,4.336e-04,2.884e-04},
   {4.328e-01,4.327e-01,4.326e-01,4.325e-01,4.323e-01,4.321e-01,4.317e-01,4.310e-01,4.300e-01,4.283e-01,4.258e-01,4.220e-01,4.161e-01,4.075e-01,3.952e-01,3.788e-01,3.584e-01,3.350e-01,3.103e-01,2.854e-01,2.609e-01,2.364e-01,2.115e-01,1.857e-01,1.592e-01,1.320e-01,1.048e-01,7.956e-02,5.830e-02,4.233e-02,3.109e-02,2.315e-02,1.737e-02,1.310e-02,9.965e-03,7.636e-03,5.872e-03,4.504e-03,3.430e-03,2.589e-03,1.940e-03,1.443e-03,1.061e-03,7.650e-04,5.354e-04,3.635e-04,2.432e-04},
   {3.260e-01,3.260e-01,3.259e-01,3.258e-01,3.258e-01,3.256e-01,3.253e-01,3.250e-01,3.243e-01,3.234e-01,3.219e-01,3.196e-01,3.161e-01,3.110e-01,3.036e-01,2.937e-01,2.810e-01,2.661e-01,2.497e-01,2.324e-01,2.143e-01,1.953e-01,1.753e-01,1.543e-01,1.325e-01,1.098e-01,8.726e-02,6.618e-02,4.841e-02,3.506e-02,2.569e-02,1.907e-02,1.426e-02,1.073e-02,8.134e-03,6.216e-03,4.768e-03,3.647e-03,2.768e-03,2.081e-03,1.552e-03,1.150e-03,8.429e-04,6.062e-04,4.238e-04,2.882e-04,1.941e-04},
   {2.241e-01,2.241e-01,2.241e-01,2.241e-01,2.240e-01,2.240e-01,2.238e-01,2.237e-01,2.234e-01,2.229e-01,2.223e-01,2.212e-01,2.196e-01,2.172e-01,2.137e-01,2.089e-01,2.025e-01,1.947e-01,1.854e-01,1.748e-01,1.629e-01,1.496e-01,1.349e-01,1.192e-01,1.025e-01,8.509e-02,6.767e-02,5.133e-02,3.752e-02,2.712e-02,1.982e-02,1.466e-02,1.092e-02,8.184e-03,6.184e-03,4.713e-03,3.606e-03,2.751e-03,2.083e-03,1.561e-03,1.161e-03,8.580e-04,6.273e-04,4.495e-04,3.130e-04,2.126e-04,1.440e-04},
   {1.394e-01,1.394e-01,1.394e-01,1.393e-01,1.393e-01,1.393e-01,1.393e-01,1.392e-01,1.391e-01,1.390e-01,1.387e-01,1.384e-01,1.378e-01,1.369e-01,1.356e-01,1.338e-01,1.312e-01,1.277e-01,1.232e-01,1.176e-01,1.106e-01,1.024e-01,9.286e-02,8.230e-02,7.094e-02,5.903e-02,4.704e-02,3.576e-02,2.616e-02,1.892e-02,1.381e-02,1.020e-02,7.568e-03,5.648e-03,4.253e-03,3.233e-03,2.470e-03,1.882e-03,1.423e-03,1.067e-03,7.942e-04,5.872e-04,4.290e-04,3.062e-04,2.119e-04,1.432e-04,9.745e-05},
   {7.604e-02,7.604e-02,7.603e-02,7.603e-02,7.603e-02,7.602e-02,7.601e-02,7.599e-02,7.596e-02,7.591e-02,7.584e-02,7.573e-02,7.555e-02,7.528e-02,7.486e-02,7.422e-02,7.327e-02,7.189e-02,6.995e-02,6.729e-02,6.380e-02,5.941e-02,5.415e-02,4.814e-02,4.160e-02,3.472e-02,2.779e-02,2.123e-02,1.561e-02,1.134e-02,8.295e-03,6.124e-03,4.536e-03,3.374e-03,2.534e-03,1.924e-03,1.470e-03,1.122e-03,8.510e-04,6.409e-04,4.796e-04,3.565e-04,2.612e-04,1.862e-04,1.281e-04,8.610e-05,5.885e-05},
   {3.382e-02,3.382e-02,3.382e-02,3.381e-02,3.381e-02,3.381e-02,3.381e-02,3.380e-02,3.379e-02,3.378e-02,3.376e-02,3.372e-02,3.366e-02,3.357e-02,3.343e-02,3.322e-02,3.289e-02,3.239e-02,3.165e-02,3.060e-02,2.915e-02,2.725e-02,2.490e-02,2.219e-02,1.922e-02,1.612e-02,1.299e-02,1.003e-02,7.466e-03,5.480e-03,4.038e-03,2.990e-03,2.213e-03,1.643e-03,1.232e-03,9.352e-04,7.164e-04,5.497e-04,4.205e-04,3.201e-04,2.425e-04,1.823e-04,1.348e-04,9.649e-05,6.645e-05,4.483e-05,3.108e-05},
   {1.108e-02,1.108e-02,1.108e-02,1.108e-02,1.108e-02,1.108e-02,1.107e-02,1.107e-02,1.107e-02,1.107e-02,1.106e-02,1.105e-02,1.103e-02,1.101e-02,1.097e-02,1.090e-02,1.081e-02,1.066e-02,1.043e-02,1.011e-02,9.646e-03,9.033e-03,8.269e-03,7.385e-03,6.427e-03,5.434e-03,4.441e-03,3.492e-03,2.653e-03,1.982e-03,1.479e-03,1.102e-03,8.166e-04,6.052e-04,4.528e-04,3.439e-04,2.644e-04,2.048e-04,1.589e-04,1.233e-04,9.539e-05,7.329e-05,5.529e-05,4.038e-05,2.845e-05,1.982e-05,1.437e-05},
   {2.364e-03,2.364e-03,2.364e-03,2.364e-03,2.364e-03,2.364e-03,2.363e-03,2.363e-03,2.363e-03,2.362e-03,2.360e-03,2.358e-03,2.355e-03,2.350e-03,2.342e-03,2.330e-03,2.310e-03,2.281e-03,2.236e-03,2.171e-03,2.078e-03,1.955e-03,1.802e-03,1.625e-03,1.434e-03,1.236e-03,1.034e-03,8.355e-04,6.521e-04,4.978e-04,3.767e-04,2.830e-04,2.105e-04,1.558e-04,1.162e-04,8.813e-05,6.808e-05,5.344e-05,4.250e-05,3.411e-05,2.751e-05,2.211e-05,1.752e-05,1.356e-05,1.029e-05,7.862e-06,6.317e-06},
   {2.983e-04,2.982e-04,2.982e-04,2.982e-04,2.982e-04,2.982e-04,2.982e-04,2.982e-04,2.981e-04,2.980e-04,2.979e-04,2.977e-04,2.974e-04,2.970e-04,2.962e-04,2.951e-04,2.933e-04,2.905e-04,2.863e-04,2.801e-04,2.713e-04,2.595e-04,2.446e-04,2.268e-04,2.066e-04,1.841e-04,1.592e-04,1.325e-04,1.059e-04,8.236e-05,6.326e-05,4.825e-05,3.638e-05,2.723e-05,2.054e-05,1.583e-05,1.253e-05,1.023e-05,8.603e-06,7.410e-06,6.479e-06,5.689e-06,4.977e-06,4.328e-06,3.767e-06,3.331e-06,3.040e-06},
   {2.297e-05,2.297e-05,2.297e-05,2.296e-05,2.296e-05,2.296e-05,2.296e-05,2.296e-05,2.296e-05,2.296e-05,2.295e-05,2.295e-05,2.294e-05,2.292e-05,2.290e-05,2.286e-05,2.280e-05,2.270e-05,2.255e-05,2.233e-05,2.200e-05,2.154e-05,2.089e-05,2.002e-05,1.886e-05,1.736e-05,1.548e-05,1.326e-05,1.093e-05,8.801e-06,7.086e-06,5.751e-06,4.678e-06,3.829e-06,3.200e-06,2.755e-06,2.446e-06,2.236e-06,2.094e-06,1.996e-06,1.922e-06,1.857e-06,1.796e-06,1.737e-06,1.684e-06,1.640e-06,1.608e-06},
   {1.546e-06,1.546e-06,1.546e-06,1.546e-06,1.546e-06,1.546e-06,1.545e-06,1.545e-06,1.545e-06,1.545e-06,1.545e-06,1.545e-06,1.545e-06,1.545e-06,1.544e-06,1.544e-06,1.542e-06,1.541e-06,1.538e-06,1.534e-06,1.527e-06,1.516e-06,1.500e-06,1.477e-06,1.442e-06,1.393e-06,1.329e-06,1.251e-06,1.168e-06,1.092e-06,1.032e-06,9.867e-07,9.497e-07,9.197e-07,8.973e-07,8.813e-07,8.701e-07,8.624e-07,8.574e-07,8.539e-07,8.513e-07,8.490e-07,8.467e-07,8.444e-07,8.421e-07,8.397e-07,8.374e-07},
   {3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.938e-07,3.937e-07,3.937e-07,3.937e-07,3.937e-07,3.936e-07,3.935e-07,3.933e-07,3.931e-07,3.928e-07,3.923e-07,3.918e-07,3.913e-07,3.908e-07,3.904e-07,3.901e-07,3.898e-07,3.896e-07,3.894e-07,3.893e-07,3.893e-07,3.892e-07,3.891e-07,3.891e-07,3.890e-07,3.890e-07,3.889e-07,3.887e-07,3.885e-07,3.881e-07,3.875e-07}};

#endif  // CO_SHIELDING


/*----------------------------------------------------------------------------*/
/* PRIVATE FUNCTIONS                                                          */
/*----------------------------------------------------------------------------*/
inline int linearInterpIndex_(const int len, const Real xarr[], const Real x);
inline Real linearInterp_(const Real x0, const Real x1, const Real y0,
                          const Real y1, const Real x);
inline Real LP1Di_(const Real *xarr, const Real *data, const int ix,
                   const Real x);
inline Real LP2Di_(const Real *xarr, const Real *yarr,
                   const int lenx, const int ix, const int iy,
                   const Real *data, const Real x, const Real y);

//helper functions for cooling-------------------------------------------------
Real q10CII_(const Real nHI, const Real nH2, const Real ne, const Real T);
Real cooling2Level_(const Real q01, const Real q10, const Real A10,
		    const Real E10, const Real xs);

Real cooling3Level_(const Real q01, const Real q10, const Real q02,
		    const Real q20, const Real q12, const Real q21,
		    const Real A10, const Real A20, const Real A21,
		    const Real E10, const Real E20, const Real E21,
		    const Real xs);

Real coolingdust_net_residual(const Real Td, const Real nH, const Real T, const Real Z_d,
                              const Real h_dust_UV, Real *cool_dust_gas);
Real coolingdust_gas(const Real nH, const Real T, const Real Td, const Real Z_d);

#ifdef CO_SHIELDING
Real fShield_CO_V09_(const Real NCO, const Real NH2);
#endif  // CO_SHIELDING

// CII rates
Real get_alpha_CII(const Real T);

// H2 rates
Real get_xi_coll_H2(const Real nH, const Real T, const Real xHI,
                    const Real xH2);
Real get_kgr_H2(const Real T, const Real Z_d);
Real get_ncrit_H2heating(const Real T, const Real xHI,
                         const Real xH2, const Real xi_diss_H2);
// HII rates
Real get_k_coll_HI(const Real T);

// electron abundance
Real get_xe_mol(const Real nH, const Real xH2, const Real xe, const Real T,
                     const Real xi_CR, const Real Z_g, const Real Z_d);
Real get_xe_cie(const Real T1, const Real Z_g);

//C+ abundance, depending on abundances of e- and H2
Real get_xCII(const Real xe, const Real xH2, const Real nH, const Real T,
              const Real Z_d, const Real Z_g, const Real xi_CR,
              const Real chi_fuv, const Real chi_ci);

//heating---------------------------------------------------------------------
//cosmic ray heating
Real heatingCR(const Real xe, const Real xHI, const Real xH2,
	       const Real nH, const Real xi_CR);
//photo electric heating on dust
Real heatingPE(const Real xe, const Real nH, const Real T,
               const Real Z_d, const Real chi_fuv);
//Heating by H2 formation/dissociation/pumping
Real heatingH2_pump(const Real nH, const Real ncrit,
                    const Real xH2, const Real xi_diss_H2);

//cooling---------------------------------------------------------------------
//H2 rovib cooling
Real coolingH2rovib(const Real xH2, const Real xHI, const Real nH, const Real T);
//H2 collisional dissociation cooling
Real coolingH2colldiss(const Real xH2, const Real xHI, const Real nH, const Real T);
//HI Lyman alpha cooling
Real coolingLya(const Real xe, const Real xHI, const Real nH,
		const Real T);
//HI cooling by Smith+21
Real coolingHI_Smith21(const Real xe, const Real xHI, const Real nH,
                       const Real T);
//HI (collisional ionization) cooling
Real coolingHIion(const Real xe, const Real xHII, const Real nH,
                  const Real T);
//OI cooling
Real coolingOI(const Real xe, const Real xOI, const Real xHI,
	       const Real xH2, const Real nH, const Real T);
//Nebula cooling (in photoionized gas)
Real coolingneb(const Real xe, const Real xHII, const Real nH,
                const Real T, const Real Z_g);
//OII cooling
Real coolingOII(const Real xe, const Real xOII, const Real nH,
               const Real T);
//C+ cooling
Real coolingCII(const Real xe, const Real xCII, const Real xHI,
		const Real xH2, const Real nH, const Real T);
//cooling by recombination of e on PAHs
Real coolingRec(const Real xe, const Real nH, const Real T,
		            const Real Z_d, const Real chi_fuv);
//CI cooling
Real coolingCI(const Real xe, const Real xCI, const Real xHI,
	       const Real xH2, const Real nH, const Real T);
//CO rotational line cooling, dvdr in cgs units
Real coolingCO(const Real xe, const Real xCO, const Real xHI,
	       const Real xH2, const Real nH, const Real T,
	       const Real dvdr);

//H+ abundance without grain assisted recombination,
//depending on abundances of H2, ignoring electron contribution of C+
Real get_xHII_ng(const Real xH2, const Real nH, const Real T,
                 const Real Z_d, const Real xi_CR);

Real get_xHII_gr(const Real xe, const Real xH2,
                 const Real nH, const Real T, const Real Z_d, const Real xi_CR,
                 const Real chi_fuv);


// Real get_xH2(const Real nH, const Real T, const Real Z_d,
//              const Real xi_CR, const Real chi_h2);

// void ath_error(char *fmt, ...);


// void ath_error(char *fmt, ...)
// {
//   va_list ap;
//    FILE *atherr = atherr_fp();

//   fprintf(atherr,"### Fatal error: ");   /* prefix */
//   va_start(ap, fmt);              /* ap starts with string 'fmt' */
//   vfprintf(atherr, fmt, ap);      /* print out on atherr */
//   fflush(atherr);                 /* flush it NOW */
//   va_end(ap);                     /* end varargs */

// #ifdef MPI_PARALLEL
//   MPI_Abort(MPI_COMM_WORLD, 1);
// #endif

//   exit(EXIT_FAILURE);
// }


/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of PUBLIC FUNCTIONS                                         */
/*----------------------------------------------------------------------------*/
// Calculate H CIE cooling efficiency coefficient from table
Real Lambda_H_tbl(const Real T) {

  const Real log10Tmin=4.0;
  const Real dlog10T_inv = 50.0;

  Real log10T = ln10_inv*LOG(T);

  if (log10T < log10Tmin) { // should never occur as long as Thot0 > log10Tmin
    // ath_error("[Lambda_tbl]: Check T range "
    //           "log10T %g should be equal to or greater than log10Tmin %g\n",
    //           log10T, log10Tmin);
  } else {
    // Real and integer (floored) indices
    // use linear extrapolation for T > 10^9 K
    Real idx_ = (log10T - log10Tmin)*dlog10T_inv;
    int idx = (int)(std::min(idx_, (Real)len_Lambda_tbl_ - 2));
    Real log10LH_i = log10Lambda_H_[idx];
    Real log10LH_i1p = log10Lambda_H_[idx+1];
    Real log10LH = log10LH_i + (log10LH_i1p - log10LH_i)*(idx_ - (Real)(idx));

    return POW(10.0,log10LH);
  }

  return 0.0;

}

// Calculate He + Metal cooling efficiency coefficient from table
Real Lambda_He_tbl(const Real T) {

  const Real log10Tmin = 4.0;
  const Real dlog10T_inv = 50.0;

  Real log10T = ln10_inv*LOG(T);

  if (log10T < log10Tmin) { // should never occur as long as Thot0 > log10Tmin
    // ath_error("[Lambda_tbl]: Check T range "
    //           "log10T %g should be equal to or greater than log10Tmin %g\n",
    //           log10T, log10Tmin);
  } else {
    // Real and integer (floored) indices
    // use linear extrapolation for T > 10^9 K
    Real idx_ = (log10T - log10Tmin)*dlog10T_inv;
    int idx = (int)(std::min(idx_, (Real)len_Lambda_tbl_ - 2));
    Real log10LHe_i = log10Lambda_He_[idx];
    Real log10LHe_i1p = log10Lambda_He_[idx+1];
    Real log10LHe = log10LHe_i + (log10LHe_i1p - log10LHe_i)*(idx_ - (Real)(idx));

    return POW(10.0,log10LHe);
  }

  return 0.0;
}

Real Lambda_metal_tbl(const Real T, const Real Z_g) {

  const Real log10Tmin=4.0;
  const Real dlog10T_inv = 50.0;

  Real log10T = ln10_inv*LOG(T);

  if (log10T < log10Tmin) { // should never occur as long as Thot0 > log10Tmin
    // ath_error("[Lambda_tbl]: Check T range "
    //           "log10T %g should be equal to or greater than log10Tmin %g\n",
    //           log10T, log10Tmin);
  } else {
    // Real and integer (floored) indices
    // use linear extrapolation for T > 10^9 K
    Real idx_ = (log10T - log10Tmin)*dlog10T_inv;
    int idx = (int)(std::min(idx_, (Real)len_Lambda_tbl_ - 2));
    Real log10Lmetal_i = log10Lambda_metal_[idx];
    Real log10Lmetal_i1p = log10Lambda_metal_[idx+1];
    Real log10Lmetal = log10Lmetal_i + (log10Lmetal_i1p - log10Lmetal_i)
                                       *(idx_ - (Real)(idx));

    return Z_g*POW(10.0,log10Lmetal);
  }

  return 0.0;

}

Real CalculateFreeElectron(const Real xe, const Real xHI, const Real xH2, const Real xHII,
                           const Real nH, const Real T, const Real Z_d, const Real Z_g,
                           const Real xi_CR, const Real chi_fuv, const Real chi_ci,
                           Real *xCII_eq) {
  
  Real xe_new, xOII, xCII, xe_other;
  if (T < temp_hot0) {
    if (iChem) {
      xOII = xHII*xOstd*Z_g;
      xCII = get_xCII(xe, xH2, nH, T, Z_d, Z_g, xi_CR, chi_fuv, chi_ci);
    } else {
      xOII = xHII*xOstd*Z_g;
      xCII = xCstd*Z_g;
    }
    xe_other = xCII + xOII + get_xe_mol(nH, xH2, xe, T, xi_CR, Z_g, Z_d);
    xe_new = xHII + xe_other;
  } else {
    // xe_He,CIE <<1 at T=Tho0 but dominates over xe_metal,CIE
    // No need to use sigmoid function since xe from He and metal is small
    // compared to xe from hydrogen
    xe_new = xHII + get_xe_cie(T, Z_g);
  }
  *xCII_eq = xCII;
  
  return xe_new;
  
}

Real HeatingOther(const Real xe, const Real xHI, const Real xH2,
                  const Real nH, const Real T, const Real Z_d,
                  const Real xi_CR, const Real chi_fuv,
                  const Real xi_ph_H2, const Real xi_diss_H2, const Real xi_ph_HI) {

  const int iPhotIon = 1;
  
  Real heat = 0.0;
  heat += heatingCR(xe, xHI, xH2, nH, xi_CR);
  if (iPEheating) heat += heatingPE(xe, nH, T, Z_d, chi_fuv);

  if (iPhotIon) {
    heat += xHI*xi_ph_HI*dhnu_HI_PH;
    heat += xH2*xi_ph_H2*dhnu_H2_PH;
  }

  return heat;
}

Real CoolingOther(const Real xe, const Real xHI, const Real xH2, const Real xHII,
                  const Real nH, const Real T, const Real dvdr,
                  const Real Z_d, const Real Z_g, const Real xi_CR,
                  const Real chi_fuv, const Real chi_ci, const Real chi_co) {
  
  Real c_OI=0.0, c_neb=0.0, c_CI=0.0, c_CII=0.0, c_CO=0.0, c_Rec=0.0;
  Real xOII, xCII, xCO, xOI, xCI;
  // Determine equilibrium abundances of OII and CII first
  if (iChem) {
    xOII = xHII*xOstd*Z_g;
    xCII = get_xCII(xe, xH2, nH, T, Z_d, Z_g, xi_CR, chi_fuv, chi_ci);
    xCO = CalculateCOAbundance(xH2, xCII, xOII, nH, Z_d, Z_g, xi_CR, chi_co);
    xOI = std::max(xOstd*Z_g - xOII - xCO, TINY_NUMBER);
    xCI = std::max(xCstd*Z_g - xCII - xCO, TINY_NUMBER);
  } else {
    xOII = xHII*xOstd*Z_g;
    xCII = xCstd*Z_g;
    xCO = 0.0;
    xOI = std::max(xOstd*Z_g - xOII - xCO, TINY_NUMBER);
    xCI = 0.0;
  }

  if (xCI != 0.0) c_CI = coolingCI(xe, xCI, xHI, xH2, nH, T);
  if (xCO != 0.0) c_CO = coolingCO(xe, xCO, xHI, xH2, nH, T, dvdr);
  c_CII = coolingCII(xe, xCII, xHI, xH2, nH, T);
  c_OI = coolingOI(xe, xOI, xHI, xH2, nH, T);

  // nebula cooling
  if (iPhotIon) {
    c_neb = coolingneb(xe, xHII, nH, T, Z_g);
  }

  // grain-assisted recombination
  c_Rec = coolingRec(xe, nH, T, Z_d, chi_fuv);

  return c_OI + c_neb + c_CI + c_CII + c_CO + c_Rec;
}

Real CoolingHI(const Real xe, const Real xHI, const Real nH, const Real T) {
  Real cool_HI = 0.;
  if (iCoolHISmith21) {
    cool_HI += coolingHI_Smith21(xe, xHI, nH, T);
  } else {
    if (T > 3.0e3) {
      cool_HI += coolingLya(xe, xHI, nH, T );
      cool_HI += coolingHIion(xe, xHI, nH, T );
    }
  }

  return cool_HI;
}

Real CoolingHII(const Real xe, const Real xHII, const Real nH, const Real T) {
  // Free-free (Draine 2011)
  Real a = LOG(3.9810717e-06*T);
  Real gff_T = 1.0 + 0.44/(1.0 + 0.058*a*a);
  Real c_ff = 1.422e-25*gff_T*sqrt(T*1e-4)*nH*xe*xHII;

  // Recombination cooling (Draine 2011)
  Real Tinv = 1.0/T;
  Real bb = 315614.0*Tinv;
  Real cc = 115188.0*Tinv;
  Real k_Hplus_e = 2.753e-14 * POW(bb, 1.5) *
    POW(1.0 + POW(cc, 0.407), -2.242);
  // Mean energy per recombination
  Real Err_B = (0.684 - 0.0416*LOG(T*1e-4))*kb_*T;
  Real c_rec = Err_B*k_Hplus_e*nH*xe*xHII;

  return c_ff + c_rec;
}

Real CoolingH2(const Real xH2, const Real xHI, const Real nH, const Real T) {
  Real c_H2 = 0.;
  if (iCoolH2rovib) {
    c_H2 += coolingH2rovib(xH2, xHI, nH, T);
  }
  if (iCoolH2colldiss) {
    c_H2 += coolingH2colldiss(xH2, xHI, nH, T);
  }

  return c_H2;
}

/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of CHEMISTRY (PUBLIC)                                       */
/*----------------------------------------------------------------------------*/

void HIIRates(const Real nH, const Real T, const Real xHI,
              const Real xH2, const Real xe, const Real Z_d,
              const Real xi_ph_HI, const Real xi_CR, const Real chi_fuv,
              Real *crate_HII, Real *drate_HII) {

  Real ne = xe*nH;
  // collisional ionization
  Real k_coll = get_k_coll_HI(T);

  // CR ionization
  Real xi_cr = xi_CR*(2.3*xH2 + 1.5*xHI);

  // Radiative recombination
  Real Tinv = 1.0/T;
  Real bb = 315614.0*Tinv;
  Real cc = 115188.0*Tinv;
  Real dd = 1.0 + POW(cc, 0.407);
  Real alpha_rr = 2.753e-14*POW(bb, 1.5)*POW(dd, -2.242);

  // Grain-assisted recombination
  Real alpha_gr;
  if (T < temp_hot1) {
    const Real small_ = 1e-50;
    const Real cHp_[7] = {12.25, 8.074e-6, 1.378, 5.087e2,
      1.586e-2, 0.4723, 1.102e-5};
    Real lnT = LOG(T);
    Real psi_gr = 1.7*chi_fuv*sqrt(T)/(ne + small_) + small_;
    alpha_gr = 1.0e-14*cHp_[0] /
      (1.0 + cHp_[1]*POW(psi_gr, cHp_[2]) *
       (1.0 + cHp_[3] * POW(T, cHp_[4])*POW(psi_gr, -cHp_[5]-cHp_[6]*lnT)))*Z_d;
  } else {
    alpha_gr = 0.0;
  }

  // Creation and destruction rates [s^-1]
  *crate_HII = k_coll*ne + xi_cr + xi_ph_HI;
  *drate_HII = ne*alpha_rr + nH*alpha_gr;

  return;
}

void H2Rates(const Real nH, const Real T, const Real xHI,
             const Real xH2, const Real xe, const Real Z_d,
             const Real xi_ph_H2, const Real xi_diss_H2, const Real xi_CR,
             Real *crate_H2, Real *drate_H2) {

  // Formation on dust grains.
  Real kgr = get_kgr_H2(T, Z_d);

  // Destruction by collisions
  Real xi_coll_H2 = get_xi_coll_H2(nH, T, xHI, xH2);

  // Destruction by CR ionization (Eq. 17)
  Real xi_cr = 2.0*xi_CR*(2.3*xH2 + 1.5*xHI);

  // Creation and destruction rates [s^-1]
  // Note that effective CR rate is 1.65 times xi_cr (see Gong+18)
  *crate_H2 = kgr*nH;

  // destruction includes photo ionization (xi_ph_H2) and photo dissociation (xi_diss_H2)
  *drate_H2 = 1.65*xi_cr + xi_ph_H2 + xi_diss_H2 + xi_coll_H2;

  return;
}

/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of HEATING (private)                                        */
/*----------------------------------------------------------------------------*/

Real heatingCR(const Real xe, const Real xHI, const Real xH2,
	       const Real nH, const Real xi_CR) {

  /* heating rate per ionization in atomic region.
   * Draine ISM book eq (30.1)*/
  Real qHI;

  // JKIM: Why negative xe?
  if (xe > 1.0e-9) {
    qHI = ( 6.5 + 26.4 * sqrt( xe / (xe+0.07) ) ) * eV_;
  } else { //prevent sqrt of small negative number
    qHI =  6.5 * eV_;
  }

  /* Heating rate per ioniztion in molecular region.
   * Despotic paper Appendix B*/
  Real qH2;
  const Real lognH = ln10_inv*LOG(nH);
  if (nH < 100.) { //prevent log of small negative number
    qH2 = 10. * eV_;
  } else if (lognH < 4) {
    qH2 = ( 10. + 3.*(lognH - 2.)/2. ) * eV_;
  } else if (lognH < 7) {
    qH2 = ( 13. + 4.*(lognH - 4.)/3. ) * eV_;
  } else if (lognH < 10) {
    qH2 = ( 17. + (lognH - 7.)/3. ) * eV_;
  } else {
    qH2 = 18. * eV_;
  }

  const Real qtot = xHI*qHI + 2*xH2*qH2;
  return (xi_CR*qtot);
}

Real heatingPE(const Real xe, const Real nH, const Real T,
               const Real Z_d, const Real chi_fuv) {

  
  // JKIM: Floor for charging parameter ?
  // (WD01 does not recommend using their eqaution for x < 100)
  // if (x < 100.0) x = 100.0;
  Real eps = 0., GammaPE = 0.;
  Real T4 = T*1.e-4;
  Real phi_PAH = (iPEheating == 3) ? 0.5 : 1;
  Real x = 1.7 * chi_fuv * sqrt(T)/ (xe*nH*phi_PAH) + 50.0;
  if (iPEheating == 1) {
    // WD01
    eps = (CPE_[0] + CPE_[1]*POW(T, CPE_[4])) /
          (1. + CPE_[2]*POW(x, CPE_[5])*(1. + CPE_[3]*POW(x, CPE_[6])));
    GammaPE = 1.7e-26 * chi_fuv * Z_d * eps;
  } else if (iPEheating == 2) {
    // See Eq 43 in BT94
    eps = 4.87e-2/(1.0 + 4e-3*POW(x,0.73))
        + 3.65e-2*POW(T4,0.7)/(1.0 + 2e-4*x);
    GammaPE = 1.7e-24 * chi_fuv * Z_d * eps;
  } else if (iPEheating == 3) {
    // See Eq 20 in W03
    eps = 4.87e-2/(1.0 + 4e-3*POW(x,0.73))
        + 3.65e-2*POW(T4,0.7)/(1.0 + 2e-4*x);
    GammaPE = 1.3 * 1.7e-24 * chi_fuv * Z_d * eps;
  }

  return GammaPE;
}

Real HeatingH2(const Real xHI, const Real xH2, const Real nH,
               const Real T, const Real xi_diss_H2, const Real Z_d) {

  Real kgr = get_kgr_H2(T,Z_d);
  Real ncrit = get_ncrit_H2heating(T, xHI, xH2, xi_diss_H2);
  Real heatH2pump = 0., heatH2diss = 0.;
  // heating by formation
  Real heatH2form = kgr*nH*xHI*(0.2 + 4.2/(1.0+ncrit/nH));

  if (iPhotDiss) {
    // heating by UV pumping
    heatH2pump = heatingH2_pump(nH, ncrit, xH2, xi_diss_H2);
    // heating by photo. diss.
    heatH2diss = xi_diss_H2*xH2*0.4;
  }

  return (heatH2pump + heatH2form +  heatH2diss)*eV_;
}

/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of COOLING (private)                                        */
/*----------------------------------------------------------------------------*/

// H2 cooling
Real coolingH2rovib(const Real xH2, const Real xHI, const Real nH, const Real T) {

  // Cooling by rotation-vibration lines of H2
  // from Moseley et al. (2021)
  const Real n1 = 50.0;
  const Real n2 = 450.0;
  const Real n3 = 25.0;
  const Real n4 = 900;
  Real T3 = T*1e-3;
  Real T3inv = 1.0/T3;
  Real nH2 = xH2*nH;
  Real nHI = xHI*nH;
  Real x1 = nHI + 5.0*nH2;
  Real x2 = nHI + 4.5*nH2;
  Real x3 = nHI + 0.75*nH2;
  Real x4 = nHI + 0.05*nH2;
  Real sqrtT3 = sqrt(T3);
  Real f1 = 1.1e-25*sqrtT3*EXP(-0.51*T3inv)*
    (0.7*x1/(1.0 + x1/n1) + 0.3*x1/(1.0 + x1/(10.0*n1)));
  Real f2 = 2.0e-25*T3*EXP(-T3inv)*
    (0.35*x2/(1.0 + x2/n2) + 0.65*x2/(1.0 + x2/(10.0*n2)));
  Real f3 = 2.4e-24*sqrtT3*T3*EXP(-2.0*T3inv)*
    (x3/(1.0 + x3/n3));
  Real f4 = 1.7e-23*sqrtT3*T3*EXP(-4.0*T3inv)*
    (0.45*x4/(1.0 + x4/n4) + 0.55*x4/(1.0 + x4/(10.0*n4)));

  return xH2*(f1 + f2 + f3 + f4);
}

Real coolingH2colldiss(const Real xH2, const Real xHI, const Real nH, const Real T) {

  Real xi_coll_H2 = get_xi_coll_H2(nH, T, xHI, xH2);
  return 4.48*eV_*xH2*xi_coll_H2;
}

// HI cooling
Real coolingLya(const Real xe, const Real xHI, const Real nH, const Real T) {
  Real ne = xe * nH;
  Real T4 = T * 1.0e-4;
  // Fit to R-matrix data presented in Vrinceanu et al. (2014)
  Real fac = 5.30856e-08*POW(T4,1.4897e-01)/(1.0 + POW(0.2*T4, 0.64897));
  Real k01e = fac * EXP((-11.84/T4));
  Real q01 = k01e * ne;
  Real q10 = (g0HI_/g1HI_) * fac * ne;

  return cooling2Level_(q01, q10, A10HI_, E10HI_, xHI);
}

Real coolingHI_Smith21(const Real xe, const Real xHI, const Real nH, const Real T) {
  // Cooling by collisional excitation of HI (in the low-density limit)
  // Adopted from Eq. A5 in A. Smith et al. (2021)
  const Real g1 = 2.0;
  const Real prefactor = 8.62913e-06;

  Real Tinv = 1.0/T;
  Real T6 = T*1e-6;

  Real T6_ONE = std::min(0.3,T6);
  Real T6_SQR = T6*T6;
  Real T6_CUB = T6_SQR*T6;
  Real Upsilon_12_cool = 0.616414 + 16.8152*T6_ONE - 32.0571*T6_SQR + 35.5428*T6_CUB;
  Real Upsilon_13_cool = 0.217382 + 3.92604*T6_ONE - 10.6349*T6_SQR + 13.7721*T6_CUB;
  Real Upsilon_14_cool = 0.0959324 + 1.89951*T6_ONE - 6.96467*T6_SQR + 10.6362*T6_CUB;
  Real Upsilon_15_cool = 0.0747075 + 0.670939*T6_ONE - 2.28512*T6_SQR + 3.4796*T6_CUB;

  // Total = sum_n E1n*exp(-T1n/T)*Upsilon_1n_Cool
  Real total =
    1.63490e-11*Upsilon_12_cool*EXP(-118415.6*Tinv) +
    1.93766e-11*Upsilon_13_cool*EXP(-140344.4*Tinv) +
    2.04363e-11*Upsilon_14_cool*EXP(-148019.5*Tinv) +
    2.09267e-11*Upsilon_15_cool*EXP(-151572.0*Tinv);

  return xHI*nH*xe*prefactor/(g1*sqrt(T))*total;
}

Real coolingHIion(const Real xe, const Real xHI, const Real nH, const Real T) {
  // Cooling due to collisional ionization
  Real lnTe = LOG(T*8.6173e-5);
  Real k_coll = EXP((-3.271396786e1
                      + (1.35365560e1 + (- 5.73932875 + (1.56315498
                      + (- 2.877056e-1 + (3.48255977e-2 + (-2.63197617e-3
                      + (1.11954395e-4 + (-2.03914985e-6)
                        *lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe));
  return 13.6*eV_*k_coll*nH*xe*xHI;
}

// grain recombination
Real coolingRec(const Real xe, const Real nH, const Real T,
                const Real Z_d, const Real chi_fuv) {
  
  const Real ne = xe * nH;
  Real phi_PAH = (iPEheating == 3) ? 0.5 : 1;
  Real x = 1.7 * chi_fuv * sqrt(T)/ (xe*nH*phi_PAH) + 50.0;
  if (iPEheating == 1) {
    // chi_fuv is in Draine ISRF unit, so we multiply 1.7
    const Real lnx = LOG(x);
    return 1.0e-28*ne*POW(T, DPE_[0] + DPE_[1]/lnx)
          * EXP( DPE_[2] + (DPE_[3] - DPE_[4]*lnx)*lnx )*Z_d;
  } else if (iPEheating == 2) {
    const Real beta = 0.735*POW(T,-0.068);
    return 3.49e-30*POW(T, 0.944)*POW(x, beta)*ne*Z_d;
  } else if (iPEheating == 3) {
    const Real beta = 0.735*POW(T,-0.068);
    return 4.65e-30*POW(T, 0.944)*POW(x, beta)*ne*Z_d*phi_PAH;
  }

  return 0.;
}

// metal cooling
Real coolingOI(const Real xe, const Real xOI, const Real xHI,
               const Real xH2, const Real nH, const Real T) {
  const Real nHI = xHI * nH;
  const Real nH2 = xH2 * nH;
  const Real ne = xe * nH;
  /*collisional rates from  Draine (2011) ISM book Appendix F Table F.6*/
  const Real T2 = T*1e-2;
  const Real lnT2 = LOG(T2);
  /*HI*/
  const Real k10HI = 3.57e-10 * POW(T2, 0.419-0.003*lnT2);
  const Real k20HI = 3.19e-10 * POW(T2, 0.369-0.006*lnT2);
  const Real k21HI = 4.34e-10 * POW(T2, 0.755-0.160*lnT2);
  /*H2*/
  const Real k10H2p = 1.49e-10 * POW(T2, 0.264+0.025*lnT2);
  const Real k10H2o = 1.37e-10 * POW(T2, 0.296+0.043*lnT2);
  const Real k20H2p = 1.90e-10 * POW(T2, 0.203+0.041*lnT2);
  const Real k20H2o = 2.23e-10 * POW(T2, 0.237+0.058*lnT2);
  const Real k21H2p = 2.10e-12 * POW(T2, 0.889+0.043*lnT2);
  const Real k21H2o = 3.00e-12 * POW(T2, 1.198+0.525*lnT2);
  const Real k10H2 = k10H2p*fp_ + k10H2o*fo_;
  const Real k20H2 = k20H2p*fp_ + k20H2o*fo_;
  const Real k21H2 = k21H2p*fp_ + k21H2o*fo_;
  /*e*/
  /*fit from Bell+1998*/
  const Real k10e = 5.12e-10 * POW(T, -0.075);
  const Real k20e = 4.86e-10 * POW(T, -0.026);
  const Real k21e = 1.08e-14 * POW(T, 0.926);
  /*total collisional rates*/
  const Real q10 = k10HI*nHI + k10H2*nH2 + k10e * ne;
  const Real q20 = k20HI*nHI + k20H2*nH2 + k20e * ne;
  const Real q21 = k21HI*nHI + k21H2*nH2 + k21e * ne;
  const Real q01 = (g1OI_/g0OI_) * q10 * EXP( -E10OI_/(kb_*T) );
  const Real q02 = (g2OI_/g0OI_) * q20 * EXP( -E20OI_/(kb_*T) );
  const Real q12 = (g2OI_/g1OI_) * q21 * EXP( -E21OI_/(kb_*T) );

  return cooling3Level_(q01,q10, q02, q20, q12, q21, A10OI_,A20OI_,
			A21OI_, E10OI_, E20OI_, E21OI_, xOI);
}

Real coolingneb(const Real xe, const Real xHII, const Real nH, const Real T, 
                const Real Z_g) {

  Real T4 = T*1e-4;
  Real lnT4 = LOG(T4);
  Real lnT4_2 = lnT4*lnT4;
  Real lnT4_3 = lnT4_2*lnT4;
  Real lnT4_4 = lnT4_3*lnT4;
  Real lnT4_5 = lnT4_4*lnT4;
  Real lnT4_6 = lnT4_5*lnT4;
  Real poly_fit = pow(10.0,
                      aNEB_[0]*lnT4_6 +
                      aNEB_[1]*lnT4_5 +
                      aNEB_[2]*lnT4_4 +
                      aNEB_[3]*lnT4_3 +
                      aNEB_[4]*lnT4_2 +
                      aNEB_[5]*lnT4 + aNEB_[6]);
  Real f_red = 1/(1.0 + 0.12*pow(xe*nH*1e-2, 0.38 - 0.12*lnT4));

  return 3.677602203699553e-21*
    Z_g*xHII*xe*nH/sqrt(T)*exp(-38585.52/T)*poly_fit*f_red;

}

Real coolingOII(const Real xe, const Real xOII, const Real nH, const Real T) {

  // Collisional strengths; see Appendix in Draine (2011)
  Real T4 = T*1e-4;
  Real lnT4 = LOG(T4);
  Real Omega10e = 0.803*POW(T4, (0.023-0.008*lnT4));
  Real Omega20e = 0.550*POW(T4, (0.054-0.004*lnT4));
  Real Omega21e = 1.434*POW(T4, (-0.176+0.004*lnT4));

  Real prefactor = 8.629e-8/sqrt(T4);
  Real k10e = prefactor*Omega10e/g1OII_;
  Real k20e = prefactor*Omega20e/g2OII_;
  Real k21e = prefactor*Omega21e/g2OII_;

  // Collisional rates - electron impact only
  Real q10 = nH*k10e*xe;
  Real q20 = nH*k20e*xe;
  Real q21 = nH*k21e*xe;
  Real q01 = (g1OII_/g0OII_) * q10 * EXP(-E10OII_/(kb_*T));
  Real q02 = (g2OII_/g0OII_) * q20 * EXP(-E20OII_/(kb_*T));
  Real q12 = (g2OII_/g1OII_) * q21 * EXP(-E21OII_/(kb_*T));

  return cooling3Level_(q01, q10, q02, q20, q12, q21, A10OII_, A20OII_,
                        A21OII_, E10OII_, E20OII_, E21OII_, xOII);

}

Real coolingCII(const Real xe, const Real xCII, const Real xHI,
                const Real xH2, const Real nH, const Real T) {
  const Real nHI = xHI * nH;
  const Real nH2 = xH2 * nH;
  const Real ne = xe * nH;
  const Real q10 = q10CII_(nHI, nH2, ne, T);
  const Real q01 = (g1CII_/g0CII_) * q10 * EXP(-E10CII_/(kb_*T));
  return cooling2Level_(q01, q10, A10CII_, E10CII_, xCII);
}

Real coolingCI(const Real xe, const Real xCI, const Real xHI,
               const Real xH2, const Real nH, const Real T) {
  const Real nHI = xHI * nH;
  const Real nH2 = xH2 * nH;
  const Real ne = xe * nH;
  /*e collisional coefficents from Johnson, Burke, & Kingston 1987,
   * JPhysB, 20, 2553*/
  const Real T2 = T*1e-2;
  const Real lnT2 = LOG(T2);
  const Real lnT = LOG(T);
  /*ke(u,l) = fac*gamma(u,l)/g(u)*/
  const Real fac = 8.629e-8 * sqrt(1.0e4/T);
  Real k10e, k20e, k21e;
  Real lngamma10e, lngamma20e, lngamma21e; /*collisional strength*/
  if (T < 1.0e3) {
    lngamma10e = (((-6.56325e-4*lnT -1.50892e-2)*lnT + 3.61184e-1)*lnT
		  -7.73782e-1)*lnT - 9.25141;
    lngamma20e = (((0.705277e-2*lnT - 0.111338)*lnT +0.697638)*lnT
		  - 1.30743)*lnT -7.69735;
    lngamma21e = (((2.35272e-3*lnT - 4.18166e-2)*lnT +0.358264)*lnT
		  - 0.57443)*lnT -7.4387;

  } else {
    lngamma10e = (((1.0508e-1*lnT - 3.47620)*lnT + 4.2595e1)*lnT
		  - 2.27913e2)*lnT + 4.446e2;
    lngamma20e = (((9.38138e-2*lnT - 3.03283)*lnT +3.61803e1)*lnT
		  - 1.87474e2)*lnT +3.50609e2;
    lngamma21e = (((9.78573e-2*lnT - 3.19268)*lnT +3.85049e1)*lnT
		  - 2.02193e2)*lnT +3.86186e2;
  }
  k10e = fac * EXP(lngamma10e) / g1CI_;
  k20e = fac * EXP(lngamma20e) / g2CI_;
  k21e = fac * EXP(lngamma21e) / g2CI_;
  /*HI collisional rates, Draine (2011) ISM book Appendix F Table F.6
   * NOTE: this is more updated than the LAMBDA database.*/
  const Real k10HI = 1.26e-10 * POW(T2, 0.115+0.057*lnT2);
  const Real k20HI = 0.89e-10 * POW(T2, 0.228+0.046*lnT2);
  const Real k21HI = 2.64e-10 * POW(T2, 0.231+0.046*lnT2);
  /*H2 collisional rates, Draine (2011) ISM book Appendix F Table F.6*/
  const Real k10H2p = 0.67e-10 * POW(T2, -0.085+0.102*lnT2);
  const Real k10H2o = 0.71e-10 * POW(T2, -0.004+0.049*lnT2);
  const Real k20H2p = 0.86e-10 * POW(T2, -0.010+0.048*lnT2);
  const Real k20H2o = 0.69e-10 * POW(T2, 0.169+0.038*lnT2);
  const Real k21H2p = 1.75e-10 * POW(T2, 0.072+0.064*lnT2);
  const Real k21H2o = 1.48e-10 * POW(T2, 0.263+0.031*lnT2);
  const Real k10H2 = k10H2p*fp_ + k10H2o*fo_;
  const Real k20H2 = k20H2p*fp_ + k20H2o*fo_;
  const Real k21H2 = k21H2p*fp_ + k21H2o*fo_;
  /* The totol collisonal rates*/
  const Real q10 = k10HI*nHI + k10H2*nH2 + k10e*ne;
  const Real q20 = k20HI*nHI + k20H2*nH2 + k20e*ne;
  const Real q21 = k21HI*nHI + k21H2*nH2 + k21e*ne;
  const Real q01 = (g1CI_/g0CI_) * q10 * EXP( -E10CI_/(kb_*T) );
  const Real q02 = (g2CI_/g0CI_) * q20 * EXP( -E20CI_/(kb_*T) );
  const Real q12 = (g2CI_/g1CI_) * q21 * EXP( -E21CI_/(kb_*T) );
  return cooling3Level_(q01,q10, q02, q20, q12, q21, A10CI_, A20CI_,
			A21CI_, E10CI_, E20CI_, E21CI_, xCI);
}

Real coolingCO(const Real xe, const Real xCO, const Real xHI,
               const Real xH2, const Real nH, const Real T,
               const Real dvdr) {

  const Real nHI = xHI * nH;
  const Real nH2 = xH2 * nH;
  const Real ne = xe * nH;
  const Real nCO = xCO * nH;
  //effective column of CO
  //maximum escape probability length, in cgs unites
  const Real Leff_CO_max = 3.086e20; //100 pc
  const Real mCO = 4.68e-23;
  const Real vth = sqrt(2. * kb_ * T / mCO);
  const Real grad_small = vth/Leff_CO_max;
  const Real gradeff = std::max(dvdr, grad_small);
  const Real NCOeff = nCO / gradeff;
  //maximum temperature above which use Tmax for cooling rate interpolation
  const Real TmaxCO = 2000.;
  Real T1 = 0;
  if (T < TmaxCO) {
    T1 = T;
  } else {
    T1 = TmaxCO;
  }
  const Real facT = POW(1. - EXP(-T1), 1.0e3);
  /*small number for a very small NCOeff*/
  const Real eps = 1.0e13;
  const Real log_NCOeff = ln10_inv*LOG(NCOeff*1.0e5 + eps); /*unit: cm^-2 / (km/s) */
  const Real Troot4 = POW(T1, 0.25);
  const Real neff = nH2 + 1.75*Troot4 * nHI + 680.1/Troot4 * ne;
  /* interpolate parameters using given T and NCOeff*/
  /* index of T and Neff*/
  const int iT0 =  linearInterpIndex_(lenTCO_, TCO_, T1);
  const int iNeff0 = linearInterpIndex_(lenNeffCO_, NeffCO_, log_NCOeff);
  /* L0 */
  const Real log_L0 = - LP1Di_(TCO_, L0CO_, iT0, T1);
  const Real L0 = POW10(log_L0);
  /* LLTE */
  const Real log_LLTE = - LP2Di_(TCO_, NeffCO_, lenTCO_, iT0, iNeff0,
				 LLTECO_, T1, log_NCOeff);
  const Real LLTE = POW10(log_LLTE);
  /* n1/2*/
  const Real log_nhalf = LP2Di_(TCO_, NeffCO_, lenTCO_, iT0, iNeff0,
				nhalfCO_, T1, log_NCOeff);
  const Real nhalf = POW10(log_nhalf);
  /* alpha*/
  const Real alpha = LP2Di_(TCO_, NeffCO_, lenTCO_, iT0, iNeff0,
			    alphaCO_, T1, log_NCOeff);
  const Real inv_LCO = 1./L0 + neff/LLTE
    + 1./L0 * POW(neff/nhalf, alpha) * (1. - nhalf*L0/LLTE);
  return (1./inv_LCO) * neff * xCO * facT;
}

/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of DUST COOLING/HEATING                                     */
/*----------------------------------------------------------------------------*/

// Dust cooling
Real heatingdust_IR(const Real Trad, const Real Z_d) {

  // IR dust opacity at T = 10K [cm^2 H^-1] (from Krumholz 2014)
  const Real sigma_dust_IR0 = 2.0e-25;
  const Real beta = 2.0;
  const Real Td1 = 150.0;
  Real sigma_dust_IR;

  if (Trad < Td1) {
    if (beta == 2.0) {
      sigma_dust_IR = Z_d*sigma_dust_IR0*SQR(Trad/10.0);
    } else {
      sigma_dust_IR = Z_d*sigma_dust_IR0*POW(Trad/10.0, beta);
    }
  } else {
    if (beta == 2.0) {
      sigma_dust_IR = Z_d*sigma_dust_IR0*SQR(Td1/10.0);
    } else {
      sigma_dust_IR = Z_d*sigma_dust_IR0*POW(Td1/10.0, beta);
    }
  }

  return 4.0*sigma_sb_*sigma_dust_IR*FOURTH(Trad);
}

Real coolingdust_IR(const Real Td, const Real Z_d) {

  // IR dust opacity at T = 10K [cm^2 H^-1] (from Krumholz 2014)
  const Real sigma_dust_IR0 = 2.0e-25;
  const Real beta = 2.0;
  const Real Td1 = 150.0;
  Real sigma_dust_IR;

  if (Td < Td1) {
    if (beta == 2.0) {
      sigma_dust_IR = Z_d*sigma_dust_IR0*SQR(Td/10.0);
    } else {
      sigma_dust_IR = Z_d*sigma_dust_IR0*POW(Td/10.0, beta);
    }
  } else {
    if (beta == 2.0) {
      sigma_dust_IR = Z_d*sigma_dust_IR0*SQR(Td1/10.0);
    } else {
      sigma_dust_IR = Z_d*sigma_dust_IR0*POW(Td1/10.0, beta);
    }
  }

  return 4.0*sigma_sb_*sigma_dust_IR*FOURTH(Td);
}

Real get_cooling_dust_net(const Real Td_in, const Real nH, const Real T, const Real Z_d,
                          const Real heatingdust_UV, Real *Td_out) {

  // Calculate equilibrium temperature
  const int niter_max = 50;
  const Real rtol = 1e-3;
  const Real Td_min = 1.0;
  const Real Td_max = 300.0;

  int done = 0;
  int niter = 0;
  int n;
  Real x0, x1, x2, f0, f1, f2;
  Real c_dust_gas0, c_dust_gas1, c_dust_gas2;

  // Find equilibrium dust temperature using the secant method
  x0 = Td_in;
  x1 = x0 * 1.05;
  f0 = coolingdust_net_residual(x0, nH, T, Z_d, heatingdust_UV, &c_dust_gas0);
  while (niter < niter_max) {
    f1 = coolingdust_net_residual(x1, nH, T, Z_d, heatingdust_UV, &c_dust_gas1);
    // x2 becomes negative sometimes, so take the absolute value
    x2 = fabs(x1 - f1*(x1 - x0)/(f1 - f0));
    if (fabs((x2 - x1)/x1) < rtol) {
      f2 = coolingdust_net_residual(x2, nH, T, Z_d, heatingdust_UV, &c_dust_gas2);
      *Td_out = x2;
      return c_dust_gas2;
    } else {
      x0 = x1;
      f0 = f1;
      x1 = x2;
      niter++;
      if (std::isnan(x0) || std::isnan(x1)) {
        break;
      }
    }
  }

  // If secant method fails, switch to bisection method
  if (!done) {
    x0 = Td_min;
    x2 = Td_max;
    f0 = coolingdust_net_residual(x0, nH, T, Z_d, heatingdust_UV, &c_dust_gas0);
    f2 = coolingdust_net_residual(x2, nH, T, Z_d, heatingdust_UV, &c_dust_gas2);
    if (f0*f2 > 0.0) {
      // ath_perr(-1,"[coolingdust_net]: Failed to bracket. nH %6.3e T %6.3e "
      //          "heatingdust_UV %6.3e\n",nH,T,heatingdust_UV);
      return 0.0;
    } else {
      for (n=0; n<niter_max; n++) {
        x1 = sqrt(x0*x2);         // midpoint in logspace
        f1 = coolingdust_net_residual(x1, nH, T, Z_d, heatingdust_UV, &c_dust_gas1);
        if (fabs((x0 - x1)/x0) < rtol) {
          *Td_out = x1;
          return c_dust_gas1;
        }
        if (f0*f1 < 0.0) {
          x2 = x1;
          f2 = f1;
          continue;
        }
        if (f1*f2 < 0.0) {
          x0 = x1;
          f0 = f1;
          continue;
        }
      }
      if (n == niter_max) {
        // ath_perr(-1,"[coolingdust_net]: Failed to find Tdust_eq. n %d nH %e T %e Z_d %g "
        //          "heatingdust_UV %e x0 x1 x2 %e %e %e f0 f1 f2 %e %e %e\n",
        //          n,nH,T,Z_d,heatingdust_UV,x0,x1,x2,f0,f1,f2);
        return 0.0;
      }
    }
  } // end of bisection method

  // ath_error("[coolingdust_net]: Failed to find Tdust_eq. nH %e T %e Z_d %g "
  //           "heatingdust_UV %e x0 x1 x2 %e %e %e f0 f1 f2 %e %e %e\n",
  //           nH,T,Z_d,heatingdust_UV,x0,x1,x2,f0,x1,x2);
  return 0.0;
}

/*----------------------------------------------------------------------------*/
/* IMPLEMENTATION of PRIVATE FUNCTIONS                                        */
/*----------------------------------------------------------------------------*/

Real get_xCII(const Real xe, const Real xH2, const Real nH, const Real T,
              const Real Z_d, const Real Z_g, const Real xi_CR,
              const Real chi_fuv, const Real chi_ci) {

  Real xCtot=xCstd*Z_g;
  Real small_ = 1e-50;
  Real lnT = LOG(T);

  // CR ionization
  Real k_C_cr = 3.85 * xi_CR;
  // photo ionization
  Real k_C_photo = 3.5e-10*chi_ci;
  if (iCRPhotC) {
    // C-ionizing photons produced by CR-induced electronic excitation of H2
    // Table 20 in Heays
    k_C_photo += 520.0*2.0*xH2*xi_CR;
  }

  // radiative recombination
  Real k_Cplus_e = get_alpha_CII(T);

  // grain assited recombination
  Real psi_gr = 1.7 * chi_fuv * sqrt(T)/(nH * xe + small_) + small_;
  const Real cCp_[7] = {45.58, 6.089e-3, 1.128, 4.331e2, 4.845e-2,
                        0.8120, 1.333e-4};
  Real k_Cplus_gr = 1.0e-14 * cCp_[0] /
    (
     1.0 + cCp_[1]*POW(psi_gr, cCp_[2]) *
    (1.0 + cCp_[3] * POW(T, cCp_[4])
      *POW( psi_gr, -cCp_[5]-cCp_[6]*lnT )
      )
     ) * Z_d;

  // CH2+ formation channel
  Real k_Cplus_H2 = 3.3e-13 * POW(T, -1.3) * EXP(-23./T);
  Real c = (k_C_cr + k_C_photo) / nH;
  Real al = k_Cplus_e*xe + k_Cplus_gr + k_Cplus_H2*xH2 + c;
  Real ar = xCtot * c;
  Real xCII = ar / al;
  return xCII;
}

Real CalculateCOAbundance(const Real xH2, const Real xCII, const Real xOII, const Real nH,
                          const Real Z_d, const Real Z_g, const Real xi_CR, const Real chi_co) {

  // CO abundance. Fit from Gong, Ostriker and Wolfire 2017
  // Note: This is only tested in the case Z_d = Z_g
  Real xCtot = xCstd*Z_g;
  Real xOtot = xOstd*Z_g;
  Real kcr16 = xi_CR*1.0e16;
  Real term1 = 4.0e3*Z_d/(kcr16*kcr16);
  term1 = std::max(term1, 1.);
  // modified
  Real ncrit = std::pow(term1, std::pow(chi_co, ONE_3RD)) * (50.*kcr16/std::pow(Z_d, 1.4));
  Real xCO = 1.0/(1.0 + (ncrit*ncrit)/(nH*nH));
  xCO *= (2.0*xH2);
  Real fac = std::min((xOtot - xOII),(xCtot - xCII));
  xCO *= fac;

  return xCO;
}

// calculation of xe
Real get_xe_mol(const Real nH, const Real xH2, const Real xe, const Real T,
                const Real xi_CR, const Real Z_g, const Real Z_d) {

  // Reaction coefficients in Draine (2011; Ch16.5)
  // Check errata here: https://www.astro.princeton.edu/~draine/book/errata_p1.pdf
  Real k1620 = 1e-14*Z_d;
  Real k1622 = 1e-14*Z_d;
  Real k1621 = 1e-9;
  Real k1619 = 1.0e-7*POW(T*1e-2,-0.5);
  Real phi_s = (1.0 - xe/XEL_MAX)*0.67/(1.0 + xe/0.05);
  Real xS = 5.3e-6*Z_g; // From Draine's Table 9.5 (Diffuse H2)
  Real A = k1619*(1.0 + k1621/k1622*xS);
  Real B = k1620 + k1621*xS;

  // return xH2 * Draine's (Eq.16.25)
  return 2.0*xH2*(sqrt(B*B + 4.0*A*xi_CR*(1.0 + phi_s)/nH) - B)/(2.0*k1619);
}

Real get_xe_cie(const Real T, const Real Z_g) {

  // See comments on log10T1_to_log10xe_
  const Real log10Tmin = 4.0;
  const Real dlog10T_inv = 50.0;

  Real log10T = ln10_inv*LOG(T);

  if (log10T < log10Tmin) { // should never occur as long as Thot0 > log10Tmin
    // ath_error("[get_xe_cie]: Check T range "
    //           "log10T %g should be equal to or greater than log10Tmin %g\n",
    //           log10T, log10Tmin);
  } else {
    // Real and integer (floored) indices
    Real idx_ = (log10T - log10Tmin)*dlog10T_inv;
    int idx = (int)(std::min(idx_, (Real)len_Lambda_tbl_ - 2));
    Real log10xe_He_i = log10xe_He_[idx];
    Real log10xe_He_i1p = log10xe_He_[idx+1];
    Real log10xe_metal_i = log10xe_metal_[idx];
    Real log10xe_metal_i1p = log10xe_metal_[idx+1];
    Real log10xe_He = log10xe_He_i + (log10xe_He_i1p - log10xe_He_i)*(idx_ - (Real)(idx));
    Real log10xe_metal = log10xe_metal_i +
      (log10xe_metal_i1p - log10xe_metal_i)*(idx_ - (Real)(idx));
    return POW(10.0,log10xe_He) + Z_g*POW(10.0,log10xe_metal);
  }

  return 0.0;

}

// Rate coefficient for collisional ionization
Real get_k_coll_HI(const Real T) {
  // Okay to set k_coll=0 below T=3000 K at which k_coll=1.3e-29
  Real k_coll = 0;
  if (T > 3.0e3) {
    Real lnTe = LOG(T*8.6173e-5);
    k_coll = EXP((-3.271396786e1
                      + (1.35365560e1 + (- 5.73932875 + (1.56315498
                      + (- 2.877056e-1 + (3.48255977e-2 + (-2.63197617e-3
                      + (1.11954395e-4 + (-2.03914985e-6)
                         *lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe));
  }
  return k_coll;
}

// Coliisional dissociation rates
Real get_xi_coll_H2(const Real nH, const Real T, const Real xHI,
                    const Real xH2) {

  Real xi_coll_H2 = 0.0;
  const Real temp_coll_ = 7.0e2;
  const Real small_ = 1e-50;

  if (T > temp_coll_) {
    // Glover & Mac Low (2007)
    /*(15) H2 + *H -> 3 *H
     *(16) H2 + H2 -> H2 + 2 *H
     * --(9) Density dependent. See Glover+MacLow2007*/
    Real Tinv = 1/T;
    Real logT4 = ln10_inv*LOG(T*1e-4);
    Real k9l_ = 6.67e-12 * sqrt(T) * EXP(-(1. + 63590.*Tinv));
    Real k9h_ = 3.52e-9 * EXP(-43900.0*Tinv);
    Real k10l_ = 5.996e-30 * POW(T, 4.1881) / POW((1.0 + 6.761e-6*T), 5.6881)
      * EXP(-54657.4*Tinv);
    Real k10h_ = 1.3e-9 * EXP(-53300.0*Tinv);
    Real ncrH2_ = POW(10, (4.845 - 1.3*logT4 + 1.62*logT4*logT4));
    Real ncrHI_ = POW(10, (3.0 - 0.416*logT4 - 0.327*logT4*logT4));
    Real ncrinv = xHI/ncrHI_ + 2.0*xH2/ncrH2_;
    ncrinv = std::max(ncrinv, small_);
    Real n2ncr = nH * ncrinv;
    Real k_H2_HI  = POW(10, ln10_inv*LOG(k9h_) * n2ncr/(1. + n2ncr)
                        + ln10_inv*LOG(k9l_) / (1. + n2ncr));
    Real k_H2_H2 = POW(10, ln10_inv*LOG(k10h_) *  n2ncr/(1. + n2ncr)
              + ln10_inv*LOG(k10l_) / (1. + n2ncr));
    xi_coll_H2 = k_H2_H2*nH*xH2 + k_H2_HI*nH*xHI;
  }

  return xi_coll_H2;
}

// Rate coefficient for H2 formation on dust grains
Real get_kgr_H2(const Real T, const Real Z_d) {
  // Formation on dust grains.
  Real kgr;
  if (ikgr_H2) {
    // Use temperature dependent rate from Hollenbach & McKee (1979)
    // Taking Tgr2 = 0 and renormalized to have kgr ~ kgr_H2 near 200>T>50
    const Real T2 = T*1e-2;
    kgr = kgr_H2*Z_d*sqrt(T2)*2.0/(1+0.4*sqrt(T2)+0.2*T2+0.08*T2*T2);
  } else {
    // Use temperature independent rate
    kgr = kgr_H2*Z_d;
  }
  return kgr;
}

// critical density for density dependent H2 heating
Real get_ncrit_H2heating(const Real T, const Real xHI,
                         const Real xH2, const Real xi_diss_H2) {
  Real ncrit;
  if (iH2heating == 1) {
    // V18
    const Real A = 2.0e-7;
    const Real D = xi_diss_H2;
    const Real t = 1.0 + T*1e-3;
    const Real geff_H  = POW(10.0, -11.06 + 0.0555/t - 2.390/(t*t));
    const Real geff_H2 = POW(10.0, -11.08 - 3.671/t - 2.023/(t*t));
    ncrit = (A + D) / (geff_H*xHI + geff_H2*xH2);
  } else if (iH2heating == 2) {
    // HM79
    const Real Tinv = 1.0/T;
    ncrit = 1.0e6/sqrt(T)/(1.6*xHI*EXP(-SQR(400.0*Tinv)) +
                           1.4*xH2*EXP(-(12000./(T + 1200.))));
  }
  return ncrit;
}

// heating rate by UV pumping
Real heatingH2_pump(const Real nH, const Real ncrit,
                    const Real xH2, const Real xi_diss_H2) {
  Real f_pump = 0., mean_e=0;
  if (iH2heating == 1) {
    f_pump = 8.0; // Sternberg (2014)
    mean_e = 2.0;
  } else if (iH2heating == 2) {
    f_pump = 9.0; // HM79; Draine & Bertoldi (1996) value: 6.94
    mean_e = 2.2;
  }
  Real f = 1.0/(1.0 + ncrit/nH);
  Real heatH2pump = xi_diss_H2*xH2*f_pump*mean_e*f;
  return heatH2pump;
}

// Rate coefficient for CII recombination
Real get_alpha_CII(const Real T) {
  Real k_Cplus_e = 0;
  Real lnT = LOG(T);

  if (iCII_rec_rate == 1) {
    Real lnR;
    if (T < 10.) {
      k_Cplus_e = 9.982641225129824e-11;
    } else {
      lnR = -0.7529152*lnT - 21.293937;
      k_Cplus_e = EXP(lnR);
    }
  } else if (iCII_rec_rate == 2) {
    Real A, B, T0, T1, C, T2, BN, term1, term2, alpharr, alphadr;
    A = 2.995e-9;
    B = 0.7849;
    T0 =  6.670e-3;
    T1 = 1.943e6;
    C = 0.1597;
    T2 = 4.955e4;
    BN = B + C * EXP(-T2/T);
    term1 = sqrt(T/T0);
    term2 = sqrt(T/T1);
    alpharr = A / ( term1*POW(1.0+term1, 1.0-BN) * POW(1.0+term2, 1.0+BN) );
    alphadr = POW( T, -3.0/2.0 ) * ( 6.346e-9 * EXP(-1.217e1/T) +
                                    9.793e-09 * EXP(-7.38e1/T) +
                                    1.634e-06 * EXP(-1.523e+04/T) );
    k_Cplus_e = (alpharr + alphadr);
  }
  return k_Cplus_e;
}

Real q10CII_(const Real nHI, const Real nH2, const Real ne, const Real T) {
  /*Draine (2011) ISM book eq (17.16) and (17.17)*/
  const Real T2 = T*1e-2;
  const Real k10e = 4.53e-8 * sqrt(1.0e4/T);
  const Real k10HI = 7.58e-10 * POW(T2, 0.1281+0.0087*LOG(T2));
  Real k10oH2 = 0;
  Real k10pH2 = 0;
  Real tmp = 0;
  if (T < 500.) {
    /*fit in Wiesenfeld & Goldsmith 2014*/
    k10oH2 = (5.33 + 0.11*T2)*1.0e-10;
    k10pH2 = (4.43 + 0.33*T2)*1.0e-10;
  } else {
    /* Glover+ Jappsen 2007, for high temperature scales similar to HI */
    tmp = POW(T, 0.07);
    k10oH2 = 3.74757785025e-10*tmp;
    k10pH2 = 3.88997286356e-10*tmp;
  }
  const Real k10H2 = k10oH2*fo_ + k10pH2*fp_;
  //printf("q10e=%0.4e, q10HI=%0.4e, q10H2=%0.4e\n", k10e*ne, k10HI*nHI, k10H2*nH2);
  return (k10e*ne + k10HI*nHI + k10H2*nH2);
}

Real cooling2Level_(const Real q01, const Real q10, const Real A10,
                    const Real E10, const Real xs) {
  const Real f1 = q01 / (q01 + q10 + A10);
  return f1*A10*E10*xs;
}

Real cooling3Level_(const Real q01, const Real q10, const Real q02,
                    const Real q20, const Real q12, const Real q21,
		    const Real A10, const Real A20, const Real A21,
                    const Real E10, const Real E20, const Real E21,
		    const Real xs) {
  const Real R10 = q10 + A10;
  const Real R20 = q20 + A20;
  const Real R21 = q21 + A21;
  const Real a0 = R10*R20 + R10*R21 + q12*R20;
  const Real a1 = q01*R20 + q01*R21 + R21*q02;
  const Real a2 = q02*R10 + q02*q12 + q12*q01;
  const Real de = a0 + a1 + a2;
  const Real f1 = a1 / de;
  const Real f2 = a2 / de;
  return ( f1*A10*E10 + f2*(A20*E20 + A21*E21) )*xs;
}

int linearInterpIndex_(const int len, const Real xarr[], const Real x){
  int i = 0;
  if ( x < xarr[0]) {
    return 0;
  } else if ( x > xarr[len-1]) {
    return len-2;
  } else {
    for (i=0; x>xarr[i]; i++) {}
    return i-1;
  }
}

Real linearInterp_(const Real x0, const Real x1, const Real y0,
                   const Real y1, const Real x){
  return y0 + ( (y1-y0)/(x1-x0) ) * (x-x0);
}

Real LP1Di_(const Real *xarr, const Real *data, const int ix,
            const Real x) {
  return linearInterp_(xarr[ix], xarr[ix+1], data[ix], data[ix+1], x);
}

Real LP2Di_(const Real *xarr, const Real *yarr,
            const int lenx, const int ix, const int iy,
            const Real *data, const Real x, const Real y) {
  Real fl1, fl2;
  const Real x0 = xarr[ix];
  const Real x1 = xarr[ix+1];
  fl1 = linearInterp_(x0, x1, data[iy*lenx + ix], data[iy*lenx + ix+1], x);
  fl2 = linearInterp_(x0, x1, data[(iy+1)*lenx + ix], data[(iy+1)*lenx + ix+1], x);
  return linearInterp_(yarr[iy], yarr[iy+1], fl1, fl2, y);
}

Real coolingdust_gas(const Real nH, const Real T, const Real Td, const Real Z_d) {

  // From Krumholz (2014) or Goldsmith (2001)
  // Strictly speaking the coupling constant alpha_gd depends on chemical composition
  // But this term would become important only in fully molecular region (nH > ~1e4cm^-3)
  // The value needs to be checked again later
  const Real alpha_gd = 3.2e-34;
  return Z_d*alpha_gd*nH*sqrt(T)*(T - Td);
}

Real coolingdust_net_residual(const Real Td, const Real nH, const Real T, const Real Z_d,
                              const Real h_dust_UV, Real *cool_dust_gas) {

  // Consider CMB radiation only for the time being
  const Real T_IR = 6.0;

  Real c_dust_gas = coolingdust_gas(nH, T, Td, Z_d);
  Real h_dust_IR  = heatingdust_IR(T_IR, Z_d);
  Real c_dust_IR  = coolingdust_IR(Td, Z_d);
  Real scale = h_dust_UV + h_dust_IR + c_dust_IR + fabs(c_dust_gas);

  *cool_dust_gas = c_dust_gas;

  // The term "coolingdust_gas_" is heating for dust if Td < T
  return (h_dust_UV +  + h_dust_IR + c_dust_gas - c_dust_IR)/scale;

}

#ifdef CO_SHIELDING
Real fShield_CO_V09_(const Real NCO, const Real NH2) {

  const Real N_small_ = 1.0e10;
  if ((NCO < N_small_) && (NH2 < N_small_)) {
    return 1.0;
  }

  const Real logNCO = ln10_inv*LOG(NCO);
  const Real logNH2 = ln10_inv*LOG(NH2);

  int iCO0 = linearInterpIndex_(len_NCO_V09_, logNCOV09_, logNCO);
  int iCO1 = iCO0+1;
  int iH20 = linearInterpIndex_(len_NH2_V09_, logNH2V09_, logNH2);
  int iH21 = iH20+1;

  /* Linear interpretation of the rows*/
  Real fl1 = linearInterp_(logNCOV09_[iCO0], logNCOV09_[iCO1],
		      LOG(ThetaV09_[iH20][iCO0]),  LOG(ThetaV09_[iH20][iCO1]), logNCO);
  Real fl2 = linearInterp_(logNCOV09_[iCO0], logNCOV09_[iCO1],
		      LOG(ThetaV09_[iH21][iCO0]),  LOG(ThetaV09_[iH21][iCO1]), logNCO);

  /* Linear interpretation of the column*/
  Real fl = linearInterp_(logNH2V09_[iH20], logNH2V09_[iH21], fl1, fl2, logNH2);
  return EXP(fl);
}
#endif /* CO_SHIELDING */

// Potentially unused functions
Real get_xe_fast(const Real nH, const Real T, const Real Z_d, const Real Z_g,
                 const Real xi_CR, const Real chi_fuv, const Real chi_ci,
                 const Real chi_h2, const Real xH2_in, const int iequil,
                 Real *pxHII, Real *pxH2, Real *pxCII, Real *pxCI) {

  Real xHII_ng, xHI, xH2, xHII, xCII, xCI, xCO, xOI;
  if (iequil == 1) { // Use xH2 from passive scalar field
    xH2 = xH2_in;
  } else {             // Use equilibrium xH2
    xH2 = get_xH2(nH, T, Z_d, xi_CR, chi_h2);
  }

  xHII_ng = get_xHII_ng(xH2, nH, T, Z_d, xi_CR);
  // No need to consider OII
  xCII = get_xCII(xHII_ng + xCstd*Z_g, xH2, nH, T, Z_d, Z_g, xi_CR, chi_fuv, chi_ci);
  xHII = get_xHII_gr(xHII_ng + xCII, xH2, nH, T, Z_d, xi_CR, chi_fuv);

  *pxHII = xHII;
  *pxH2 = xH2;
  *pxCII = xCII;
  *pxCI = xCstd - xCII;

  return xHII+xCII;
}


// initial guess for xH2
Real get_xH2(const Real nH, const Real T, const Real Z_d, const Real xi_CR,
             const Real chi_h2) {
  const Real temp_coll_ = 7.0e2;
  Real logT4, k9l_, k9h_, k10l_, k10h_, ncrH2_, ncr, n2ncr, k_H2_H, k_H2_H2;
  if (T > temp_coll_) {
    /*(15) H2 + *H -> 3 *H
     *(16) H2 + H2 -> H2 + 2 *H
     * --(9) Density dependent. See Glover+MacLow2007*/
    Real Tinv = 1/T;
    logT4 = ln10_inv*LOG(T*1.0e-4);
    k9l_ = 6.67e-12 * sqrt(T) * EXP(-(1. + 63590.*Tinv));
    k9h_ = 3.52e-9 * EXP(-43900.0*Tinv);
    k10l_ = 5.996e-30 * POW(T, 4.1881) / POW((1.0 + 6.761e-6 * T), 5.6881)
      * EXP(-54657.4 *Tinv);
    k10h_ = 1.3e-9 * EXP(-53300.0*Tinv);
    ncrH2_ = POW(10, (4.845 - 1.3 * logT4 + 1.62 * logT4*logT4));
    ncr = 2.*ncrH2_ ;
    n2ncr = nH / ncr;
    k_H2_H = POW(10, log10(k9h_) *  n2ncr/(1. + n2ncr)
		 + log10(k9l_) / (1. + n2ncr)) * nH;
    k_H2_H2 = POW(10, log10(k10h_) *  n2ncr/(1. + n2ncr)
		  + log10(k10l_) / (1. + n2ncr)) * nH;
  } else {
    k_H2_H = 0.;
    k_H2_H2 = 0.;
  }

  Real kgr = get_kgr_H2(T, Z_d);
  Real a = 2.31*xi_CR + 2*nH*k_H2_H - nH*k_H2_H2;
  Real c = nH * kgr;
  Real k_FUV = 5.7e-11 * chi_h2;
  Real b = - (4.95*xi_CR + 2*nH*kgr + k_FUV + nH*k_H2_H);
  Real xH2 = (-b - sqrt(b*b - 4*a*c))/(2.*a);

  xH2 = std::max(xH2, 0.0);
  xH2 = std::min(xH2, 0.5);

  return xH2;
}


Real get_xHII_gr(const Real xe, const Real xH2,
                 const Real nH, const Real T, const Real Z_d, const Real xi_CR,
                 const Real chi_fuv) {

  const Real small_ = 1e-50;
  Real Tinv = 1.0/T;
  Real bb = 315614.0*Tinv;
  Real cc = 115188.0*Tinv;
  Real k_Hplus_e = 2.753e-14 * POW(bb, 1.5) *
    POW(1.0 + POW(cc, 0.407), -2.242);

  const Real cHp_[7] = {12.25, 8.074e-6, 1.378, 5.087e2,
                        1.586e-2, 0.4723, 1.102e-5};
  Real psi_gr = 1.7 * chi_fuv * sqrt(T)/(nH * xe + small_) + small_;
  Real lnT = LOG(T);
  Real k_Hplus_gr = 1.0e-14 * cHp_[0] /
    (
     1.0 + cHp_[1]*POW(psi_gr, cHp_[2]) *
    (1.0 + cHp_[3] * POW(T, cHp_[4])
     *POW( psi_gr, -cHp_[5]-cHp_[6]*lnT)
      )
     ) * Z_d;
  Real k_cr1 = xi_CR * (1.5 - 0.7*xH2);
  Real k_coll = 0;
  const Real T_coll = 7.0e2;
  if (T > T_coll) {
    Real lnTe = LOG((T*8.6173e-5));
    k_coll = EXP((-3.271396786e1 +
                        (1.35365560e1 + (- 5.73932875 + (1.56315498
                      + (- 2.877056e-1 + (3.48255977e-2 + (- 2.63197617e-3
                      + (1.11954395e-4 + (-2.03914985e-6)
                         *lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)
                       );
  }
  Real a = nH * (k_Hplus_e + k_coll) - 1.5*xi_CR;
  Real b = k_cr1 - (1.-2.*xH2)*nH*k_coll + nH*k_Hplus_gr + (1.-2.*xH2)*1.5*xi_CR;
  Real c = -(1.-2.*xH2)*k_cr1;
  Real xHII = (-b + sqrt(b*b-4.*a*c))/(2.*a);
  xHII = std::min(xHII, 1.0);
  return xHII;
}

Real get_xHII_ng(const Real x_H2, const Real nH, const Real T, const Real Z_d,
                 const Real xi_CR) {

  Real Tinv = 1.0/T;
  Real bb = 315614.0*Tinv;
  Real cc = 115188.0*Tinv;
  Real k_Hplus_e = 2.753e-14 * POW(bb, 1.5) *
    POW(1.0 + POW(cc, 0.407), -2.242);
  Real x_H_cr = 1. - 2. * x_H2;
  x_H_cr = std::max(x_H_cr, 0.0);
  Real k_cr_H = xi_CR * (2.3*x_H2 + 1.5*x_H_cr);
  Real k_coll = 0;

  const Real T_coll = 3.0e3;
  if (T > T_coll) {
    Real lnTe = LOG(T*8.6173e-5);
    k_coll = EXP((-3.271396786e1 +
                        (1.35365560e1 + (- 5.73932875 + (1.56315498
                      + (- 2.877056e-1 + (3.48255977e-2 + (- 2.63197617e-3
                      + (1.11954395e-4 + (-2.03914985e-6)
                         *lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)*lnTe)
                       );
  }

  Real a = nH * (k_Hplus_e + k_coll);
  Real b = k_cr_H - (1.-2.*x_H2)*nH*k_coll;
  Real c = -(1.-2.*x_H2)*k_cr_H;
  Real xHII = (-b + sqrt(b*b-4.*a*c))/(2.*a);

  xHII = std::min(xHII, 1.0);
  return xHII;
}

#undef len_Lambda_tbl_

#ifdef CO_SHIELDING
#undef len_NCO_DB_
#undef len_NH2_DB_
#undef len_NCO_V09_
#undef len_NH2_V09_
#endif

// #endif /* TIGRESS_COOLING */
